<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nodejs | Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/blog/categories/nodejs/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2015-01-20T10:04:15+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Issues on Using Iisnode on Windows 7]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7/"/>
    <updated>2014-11-13T07:16:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7</id>
    <content type="html"><![CDATA[<p><strong> Update </strong></p>

<p>I found the issue with the Azure website. Sailsjs is actually working well. The issue is that I used Azure free tier and free tier is going idle (IIS app pool timeout) after some time if not used. This caused some errors when I tried to access it from browser (that&rsquo;s when the app started again). I tried to use <a href="https://uptimerobot.com/">uptimerobot</a> to check the site every 5 minutes so it will not go idle. I still found the website is stopped this morning.</p>

<p><strong> end of update </strong></p>

<p>I started to use <a href="http://sailsjs.org/">sailsjs</a> in my latest project. When I deployed it to Azure Web Sites, the web is not working. Sometimes I can access it, but most of the time I just can&rsquo;t. So I went to install IIS and iisnode on my Windows 7 machine to test the sailsjs on IIS deployment on local dev machine. Maybe I can figure out what went wrong. But what I found is series on errors when trying to run simple iisnode example.</p>

<!-- more -->


<p>So the example can be accessed on <a href="http://localhost/node">http://localhost/node</a></p>

<h3>Error #1. 500.19 with Error Code 0x80070021</h3>

<p>This happened whn I tried to click on of the example on <a href="http://localhost/node">http://localhost/node</a> page</p>

<p>Description</p>

<blockquote><p>Config Error  This configuration section cannot be used at this path. This happens when the section is locked at a parent level. Locking is either by default (overrideModeDefault=&ldquo;Deny&rdquo;), or set explicitly by a location tag with overrideMode=&ldquo;Deny&rdquo; or the legacy allowOverride=&ldquo;false&rdquo;.</p></blockquote>

<p>I spent hours trying to resolve this error. This <a href="https://github.com/tjanczuk/iisnode/issues/52">issue</a> suggested to <strong>Set the Handler Mappings to Read/Write</strong>. I checked and its set correctly but still no luck.</p>

<p>Then I fount this <a href="http://www.codeproject.com/Questions/390725/HTTP-Error-Internal-Server-Error">question</a> which linked to this <a href="http://www.donnfelker.com/iis-7-this-configuration-section-cannot-be-used-at-this-path/">blog</a>.</p>

<p>So following the answer :</p>

<ol>
<li>Open the applicationHost.config file, located here: %windir%\system32\inetsrv\config\applicationHost.config</li>
<li>Edit the &ldquo;handlers&rdquo; section.</li>
<li>Change this line:</li>
</ol>


<p><code>
  &lt;section name=”handlers” overrideModeDefault=”Deny” /&gt;
  To:
  &lt;section name=”handlers” overrideModeDefault=”Allow” /&gt;
</code></p>

<p>Now its working. I can click one of the example. Lets go to <a href="http://localhost/node/helloworld/readme.htm">helloworld</a></p>

<h3>Error #2. Nodejs path issue</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a></p>

<p>Description</p>

<blockquote><p>The iisnode module is unable to start the node.exe process. Make sure the node.exe executable is available at the location specified in the system.webServer/iisnode/@nodeProcessCommandLine element of web.config. By default node.exe is expected in one of the directories listed in the PATH environment variable.</p></blockquote>

<p>This one is easy, I use nodist which put node.exe on non default PATH. Add this line to <code>web.config</code></p>

<p>```</p>

<pre><code>&lt;iisnode
  nodeProcessCommandLine="&amp;quot;C:\Users\ArifSetiawan\Repository\nodist\bin\node.exe&amp;quot;" 
/&gt;
</code></pre>

<p>```</p>

<h3>Error #3. 500.1000 with Error Code 0x00000005</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a>. New error.</p>

<p>I spent another hours on this one. I tried to install ASP, ASP.NET and .NET Extensibility Features on IIS. Then running <code>aspnet_regiis.exe -i</code>. But still have the error!</p>

<p>Any thoughts?</p>

<p>As for me, I will just use Linux box. It&rsquo;s a shame because Azure Website scalability is a big plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly Node.js Error Message]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message/"/>
    <updated>2014-10-01T11:21:23+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message</id>
    <content type="html"><![CDATA[<p>While working with Node.js, I used <code>fs</code> module often. One function that I used frequently is <code>fs.exists()</code> to check if the file is there before doing any processing. Today, I read through Node.js <code>fs</code> documentation and found the following :</p>

<!-- more -->


<blockquote><p>fs.exists() is an anachronism and exists only for historical reasons. There should almost never be a reason to use it in your own code.</p>

<p>In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open(). Just open the file and handle the error when it&rsquo;s not there.</p></blockquote>

<p>It make sense. Suppose we want to get file stat using <code>fs.stat()</code>, just call the function and see the error code. If the file is not exists, then you will have this error :</p>

<p><code>javascript
{ [Error: ENOENT, stat 'c:\Users\ArifSetiawan\Repository\CymbRef\cmd\somefile']
  errno: 34,
  code: 'ENOENT',
  path: 'c:\\Users\\ArifSetiawan\\Repository\\CymbRef\\cmd\\somefile' }
</code></p>

<p>Node.js use POSIX codes to denote errors and its <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html">a long list</a>. How do you translate the error <strong>ENOENT</strong> into friendly error message. Do you even know that <strong>ENOENT</strong> means <code>No such file or directory</code>?</p>

<p>Lucky for us, Rod Vagg (<a href="https://github.com/rvagg">rvagg</a>) has created a node modules which give description for all kinds of errno in Node.js named <a href="https://github.com/rvagg/node-errno">errno</a>. Using example from the readme :</p>

<p>``` javascript
var fs = require(&lsquo;fs&rsquo;);
var errno = require(&lsquo;errno&rsquo;);</p>

<p>function errmsg(err) {</p>

<pre><code>var str = 'Error: '
// if it's a libuv error then get the description from errno
if (errno.errno[err.errno]) {
    str += errno.errno[err.errno].description
} else {
    str += err.message
}

// if it's a `fs` error then it'll have a 'path' property
if (err.path) {
    str += ' [' + err.path + ']'
}
return str
</code></pre>

<p>}</p>

<p>fs.stat(&lsquo;filenotexists&rsquo;, function(err, stats) {
  console.error(errmsg(err));
})
```</p>

<p>We can have human friendly readable error</p>

<p><code>plain
Error: no such file or directory [c:\Users\ArifSetiawan\Repository\CymbRef\cmd\filenotexists]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatten Node_modules]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules/"/>
    <updated>2014-09-21T05:45:42+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules</id>
    <content type="html"><![CDATA[<p>If you worked with Node.js, you might start notice youd node_modules started to simply nested into the abyss and the path is getting longer and longer. Consider this :</p>

<p><code>/C/Users/ArifSetiawan/Repository/Katch/katch/node_modules/sails/node_modules/grunt-contrib-less/node_modules/less/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-handle-source-errors.js</code></p>

<p>Yes, it is a headache to see deeply nested node_modules. You got more headache when you see that there are some duplicated node_modules pop out elsewhere. Well, the headache part is subjective my opinion.</p>

<!-- more -->


<p>I think <a href="https://www.npmjs.org/">npm</a> is designed to work in fire and forget style, when you install a module, you don&rsquo;t have to think dependencies hell where some modules require one module with different version number. If you install the latest, then other module simply break. You can&rsquo;t control that other modules author might choose to ignore if their modules dependency is updated with breaking changes. The solution is thet each module has its own <code>node_modules</code> and each module in <code>node_modules</code> has its own <code>node_modules</code> and so on.</p>

<p>A while ago, I wrote a Node.js module named <strong>flatten-packages</strong> that will flatten your node_modules into one level and removing all duplicates by aggressiely delete old version when new one is found. You can find the project on <a href="https://github.com/arifsetiawan/flatten">github</a>. There are things to consider when using <strong>flatten-packages</strong>:</p>

<ul>
<li>Your node_modules folder might explode with numbers of previously nested node_modules.</li>
<li>Version changes might break some of your dependency</li>
<li>You might be confused when trying to relate your package.json with exploded node_modules</li>
</ul>


<p>With <code>flatten-packages -i</code> command, you can get summary of your node_modules hierarcy.</p>

<p>Sample <code>flatten-packages -i</code> output</p>

<p><img src="/images/posts/flatten_node_modules_small.png" title="Flatten small" alt="Flatten small" /></p>

<p>From 17 modules into 73 modules. I can live with that</p>

<p>Now consider this</p>

<p><img src="/images/posts/flatten_node_modules_big.png" title="Flatten big" alt="Flatten big" /></p>

<p>8 layers deep of node_modules with 514 duplicates! If I flatten it, my node_modules folder with explode from 33 modules into 271 modules!</p>

<p>As I have said before, with npm you shouldn&rsquo;t worry about those deeply nested node_modules which cause <a href="https://github.com/joyent/node/issues/6960">Windows issue when filename has more than 260 characters</a> and modules duplicates (514 in above case) that eat up your disk space (disk is cheap now). It&rsquo;s just unlucky for me to work on Windows with ony 10 GB to spare. That what causes my headache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Npm]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm/"/>
    <updated>2014-09-20T17:19:15+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.org/">NPM (Node Packaged Modules)</a> is indespensable part of <a href="http://nodejs.org/">Node.js</a> ecosystem. Knowing how to use npm is really important when working on Node.js project. Some of the npm commands :</p>

<ul>
<li><code>npm init</code> &ndash;> create package.json file to start a Node.js project</li>
<li><code>npm install MODULENAME --save</code> &ndash;> install module and save to dependencies in package.json</li>
<li><code>npm install MODULENAME --save-dev</code> &ndash;> install module and save to devDependencies in package.json</li>
<li><code>npm install --production</code> &ndash;> skip devDependencies install</li>
<li><code>npm shrinkwrap</code> &ndash;> lock modules version dependency for the app</li>
<li><code>npm view -g --depth=0</code> &ndash;> list global installed modules</li>
<li><code>npm view MODULENAME</code> &ndash;> view module metadata on npmjs registry, you can check available versions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Project Base Template]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template/"/>
    <updated>2014-09-09T15:11:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template</id>
    <content type="html"><![CDATA[<p>There are many Node.js starting template, and after working couple times with <a href="http://expressjs.com/">Expressjs</a>, I also ended up creating my own base template. You can check it out <a href="https://github.com/arifsetiawan/node-base">here</a>.</p>

<!-- more -->


<p>Base template ideally support your workflow and it has some structure to organize your code. My base template is not meant to be a full fledged framework like <a href="http://sailsjs.org/">sailsjs</a>, it just a bunch of codes that I would like to be readily available when I started a Node.js project. As I work more with Node.js, my base template will be evolving.</p>

<h2>Components</h2>

<ul>
<li>MongoDB as database</li>
<li>Passport to manage authentication with session stored in MongoDB</li>
<li>Formidable for multipart post</li>
<li>Swig as templating engine</li>
<li>Generic MongoDB query</li>
<li>Front end components

<ul>
<li>Bootstrap</li>
<li>Font awesome</li>
<li>jQuery</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
