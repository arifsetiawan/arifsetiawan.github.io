<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2015-08-16T06:02:03+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Commands Collection]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/10/git-commands/"/>
    <updated>2014-09-10T14:15:37+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/10/git-commands</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> is very powerful distributed revision control. It has lots of commands but I only use several of them. I often forget some of the rarely used git commands so I make notes here.</p>

<ul>
<li><code>git clone REPOURL LOCALFOLDER</code> &ndash;> obviously to clone</li>
<li><code>git status</code> &ndash;> get status of what files are modified, added or deleted</li>
</ul>


<!-- more -->


<ul>
<li><code>git log</code> &ndash;> get commit log</li>
<li><code>git checkout -b NEWBRANCH</code> &ndash;> create new branch from existing</li>
<li><code>git checkout BRANCH</code> &ndash;> checkout the branch.</li>
<li><code>git add .</code> &ndash;> add updated files into staging</li>
<li><code>git commit -am "commit message"</code> &ndash;> commit staging</li>
<li><code>git push REMOTE BRANCH</code> &ndash;> push to remote</li>
<li><code>git fetch REMOTE</code> &ndash;> get update from remote</li>
<li><code>git merge REMOTE/BRANCH</code> &ndash;> merge with remote branch</li>
<li><code>git pull REMOTE BRANCH</code> &ndash;> fetch and merge from remote branch</li>
<li><code>git rm --cached FILE</code> &ndash;> remove file from git cache</li>
<li><code>git rm -r --cached FOLDER</code> &ndash;> remove folder from git cache</li>
<li><code>git checkout -- .</code> &ndash;> reset all current changes</li>
</ul>


<p>Here are some not-so-common git command that I found out based on necessity</p>

<ul>
<li><code>git checkout SHA</code> &ndash;> checkout the commit SHA</li>
<li><code>git diff --name-status SHA1 SHA2</code> &ndash;> check what file is changed between two commits</li>
<li><code>git reset HEAD -- .</code> &ndash;> clear staging</li>
<li><code>git merge --abort</code> &ndash;> cancel merge</li>
<li><code>git reset --hard HEAD~1</code> &ndash;> nuke the last commit</li>
<li><code>git branch -a</code> &ndash;> list all branch remote and local</li>
<li><code>git branch -r</code> &ndash;> list remote branch</li>
<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> &ndash;> rename any branch</li>
<li><code>git branch -m &lt;newname&gt;</code> &ndash;> rename current branch</li>
<li><code>git branch -d &lt;branch&gt;</code> &ndash;> delete branch</li>
<li><code>git push origin newname</code> &ndash;> push new branch to remote</li>
<li><code>git push origin :oldname</code> &ndash;> remove old branch from remote</li>
<li><code>git clean -fx</code> &ndash;> delete untracked files and directories, -f force, -n directory</li>
<li><code>git clean -n</code> &ndash;> clean dry run, list what to be deleted</li>
<li><code>git checkout -- FILENAME</code> &ndash;> cancel changes on a filename</li>
<li><code>git log -- FILENAME</code> &ndash;> view a file changing history</li>
<li><code>git commit --amend -m "New commit message"</code> &ndash;> change latest commit message</li>
</ul>


<p>Reset
```
git reset &mdash;hard HEAD~1
&ndash;>The HEAD~1 means the commit before head.</p>

<p>git reset &mdash;hard HEAD~4
git reset &mdash;hard &lt;sha1-commit-id></p>

<p>git reset &mdash;hard <REMOTE>/&lt;BRANCH_NAME>
git reset &mdash;hard origin/master
```</p>

<p>Delete a file from commit
```
find . -name .DS_Store -print0 | xargs -0 git rm -f &mdash;ignore-unmatch</p>

<p>Update .gitignore and commit
```</p>

<p>Replace master branch
```
// on development machine
git branch -m master old-master
git branch -m newbranch master
git push -f origin master</p>

<p>// on deployment machine
git branch -m master old-master
git fetch
git checkout master
```</p>

<p>Delete history of a file. This is useful if you accidentally included a file that should not be included (contains sensitive information)</p>

<p><code>
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILENAME' --prune-empty --tag-name-filter cat -- --all
git push --force --verbose --dry-run
git push --force
</code></p>

<p>Ignore files that have already been committed to a Git repository</p>

<p><code>
git rm -r --cached .
git add .
git commit -m ".gitignore is now working"
</code></p>

<p>Undo last merge. Assume local master was not ahead of origin/master. It preserve changes. Here ORIG_HEAD should point to a commit directly before merge has occurred.</p>

<p><code>
git reset --merge ORIG_HEAD
</code></p>

<p>I will add more when I found out other git commands</p>
]]></content>
  </entry>
  
</feed>
