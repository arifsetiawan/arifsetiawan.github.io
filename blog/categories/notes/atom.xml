<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notes | Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2014-09-21T09:09:53+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server Setup]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup/"/>
    <updated>2014-09-16T10:19:45+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup</id>
    <content type="html"><![CDATA[<p>When I started new Ubuntu machine on <a href="http://azure.microsoft.com/en-us/">Azure</a> or <a href="https://www.digitalocean.com/">DigitalOcean</a>, I usually install some applications such as <a href="http://nodejs.org/">Node.js</a>, <a href="http://www.mongodb.org/">MongoDB</a> and <a href="http://nginx.org/">Nginx</a> and <a href="http://git-scm.com/">Git</a>. To make things easier, I created a shell script that will do all that process.</p>

<!-- more -->


<p>```</p>

<h1>!/bin/sh</h1>

<h1>update</h1>

<p>sudo apt-get update
sudo apt-get -y upgrade
sudo apt-get -y install build-essential libssl-dev</p>

<h1>nodejs</h1>

<p>sudo add-apt-repository -y ppa:chris-lea/node.js</p>

<h1>nginx</h1>

<p>sudo add-apt-repository -y ppa:nginx/stable</p>

<h1>mongodb</h1>

<p>sudo apt-key adv &mdash;keyserver hkp://keyserver.ubuntu.com:80 &mdash;recv 7F0CEB10
echo &lsquo;deb <a href="http://downloads-distro.mongodb.org/repo/ubuntu-upstart">http://downloads-distro.mongodb.org/repo/ubuntu-upstart</a> dist 10gen&rsquo; | sudo tee /etc/apt/sources.list.d/mongodb.list</p>

<h1>git</h1>

<p>sudo add-apt-repository -y ppa:git-core/ppa</p>

<h1>redis</h1>

<p>sudo add-apt-repository -y ppa:rwky/redis</p>

<h1>update repo</h1>

<p>sudo apt-get update
sudo apt-get dist-upgrade</p>

<h1>install</h1>

<p>sudo apt-get -y install nodejs nginx mongodb-org git ufw redis-server</p>

<h1>start mongod</h1>

<p>sudo service mongod start
```</p>

<p>Using <a href="https://www.docker.com/">docker</a> would be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Commands]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/10/github-commands/"/>
    <updated>2014-09-10T14:15:37+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/10/github-commands</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> is very powerful distributed revision control. It has lots of commands but I only use several of them. I often forget some of the rarely used git commands so I make notes here.</p>

<ul>
<li><code>git clone REPOURL LOCALFOLDER</code> &ndash;> obviously to clone</li>
<li><code>git status</code> &ndash;> get status of what files are modified, added or deleted</li>
</ul>


<!-- more -->


<ul>
<li><code>git log</code> &ndash;> get commit log</li>
<li><code>git checkout -b NEWBRANCH</code> &ndash;> create new branch from existing</li>
<li><code>git checkout BRANCH</code> &ndash;> checkout the branch.</li>
<li><code>git add .</code> &ndash;> add updated files into staging</li>
<li><code>git commit -am "commit message"</code> &ndash;> commit staging</li>
<li><code>git push REMOTE BRANCH</code> &ndash;> push to remote</li>
<li><code>git fetch REMOTE</code> &ndash;> get update from remote</li>
<li><code>git merge REMOTE/BRANCH</code> &ndash;> merge with remote branch</li>
<li><code>git pull REMOTE BRANCH</code> &ndash;> fetch and merge from remote branch</li>
<li><code>git rm --cached FILE</code> &ndash;> remove file from git cache</li>
<li><code>git rm -r --cached FOLDER</code> &ndash;> remove folder from git cache</li>
<li><code>git checkout -- .</code> &ndash;> reset all current changes</li>
</ul>


<p>Here are some not-so-common git command that I found out based on necessity</p>

<ul>
<li><code>git checkout SHA</code> &ndash;> checkout the commit SHA</li>
<li><code>git diff --name-status SHA1 SHA2</code> &ndash;> check what file is changed between two commits</li>
<li><code>git reset HEAD -- .</code> &ndash;> clear staging</li>
<li><code>git merge --abort</code> &ndash;> cancel merge</li>
<li><code>git reset --hard HEAD~1</code> &ndash;> nuke the last commit</li>
<li><code>git branch -a</code> &ndash;> list all branch remote and local</li>
<li><code>git branch -r</code> &ndash;> list remote branch</li>
<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> &ndash;> rename any branch</li>
<li><code>git branch -m &lt;newname&gt;</code> &ndash;> rename current branch</li>
<li><code>git branch -d &lt;branch&gt;</code> &ndash;> delete branch</li>
<li><code>git push origin newname</code> &ndash;> push new branch to remote</li>
<li><code>git push origin :oldname</code> &ndash;> remove old branch from remote</li>
<li><code>git clean -fx</code> &ndash;> delete untracked files and directories, -f force, -n directory</li>
<li><code>git clean -n</code> &ndash;> clean dry run, list what to be deleted</li>
<li><code>git checkout -- FILENAME</code> &ndash;> cancel changes on a filename</li>
<li><code>git log -- FILENAME</code> &ndash;> change a file changing history</li>
</ul>


<p>Replace master branch
```
// on development machine
git branch -m master old-master
git branch -m newbranch master
git push -f origin master</p>

<p>// on deployment machine
git branch -m master old-master
git fetch
git checkout master
```</p>

<p>Delete history of a file. This is useful if you accidentally included a file that should not be included (contains sensitive information)</p>

<p><code>
git filter-branch --index-filter 'git update-index --remove FILENAME' STARTING-REV-SHA1..HEAD
</code></p>

<p>I will add more when I found out other git commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Project Base Template]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template/"/>
    <updated>2014-09-09T15:11:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template</id>
    <content type="html"><![CDATA[<p>There are many Node.js starting template, and after working couple times with <a href="http://expressjs.com/">Expressjs</a>, I also ended up creating my own base template. You can check it out <a href="https://github.com/arifsetiawan/node-base">here</a>.</p>

<!-- more -->


<p>Base template ideally support your workflow and it has some structure to organize your code. My base template is not meant to be a full fledged framework like <a href="http://sailsjs.org/">sailsjs</a>, it just a bunch of codes that I would like to be readily available when I started a Node.js project. As I work more with Node.js, my base template will be evolving.</p>

<h2>Components</h2>

<ul>
<li>MongoDB as database</li>
<li>Passport to manage authentication with session stored in MongoDB</li>
<li>Formidable for multipart post</li>
<li>Swig as templating engine</li>
<li>Generic MongoDB query</li>
<li>Front end components

<ul>
<li>Bootstrap</li>
<li>Font awesome</li>
<li>jQuery</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://blog.infinitesquares.net/blog/2013/11/21/hello-world/"/>
    <updated>2013-11-21T13:43:28+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2013/11/21/hello-world</id>
    <content type="html"><![CDATA[<p>Starting to blog with octopress! blogging with markdown is fun!</p>

<h2>Steps on blogging with Octopress</h2>

<p>(So I don&rsquo;t always google)</p>

<!-- more -->


<p>Notes copied from <a href="http://octopress.org/docs/blogging/">octopress docs</a></p>

<h3>New article</h3>

<p><code>
rake new_post["This is awesome article title!"]
</code>
edit headers, add categories. Example:
```</p>

<h1>One category</h1>

<p>categories: Code</p>

<h1>Multiple categories example 1</h1>

<p>categories: [Code, C++]</p>

<h1>Multiple categories example 2</h1>

<p>categories:
&ndash; Code
&ndash; C++
```</p>

<h3>New Pages</h3>

<p>```
rake new_page[super-awesome]</p>

<h1>creates /source/super-awesome/index.markdown</h1>

<p>```</p>

<h3>Content</h3>

<p>Inserting <code>&lt;!-- more --&gt;</code> will prevent the post content below this mark from being displayed on the index page for the blog posts</p>

<h3>Generate, Preview, Publish</h3>

<p><code>
bundle exec rake generate   # Generates posts and pages into the public directory
bundle exec rake preview    # Watches, and mounts a webserver at http://localhost:4000
bundle exec rake deploy     # Deploy to git
</code></p>
]]></content>
  </entry>
  
</feed>
