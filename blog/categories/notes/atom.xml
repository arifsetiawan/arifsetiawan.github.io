<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Notes | Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2015-08-23T11:01:24+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Update Open edX Codebase]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/08/23/update-open-edx-codebase/"/>
    <updated>2015-08-23T10:48:55+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/08/23/update-open-edx-codebase</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/edx/edx-platform">Open edX</a> development is very active and its updated very often. You can update existing Open edX deployment to use the latest codebase.</p>

<!-- more -->


<p>Before we continue to update Open edX codebase, please make sure you have backup of current deployment settings file. In previous post I wrote about several methods you can use to <a href="http://blog.infinitesquares.net/blog/2015/07/25/customizing-open-edx-settings/">customize your Open edX settings</a>. All settings defined in JSON files and <code>*.py</code> will reset. Settings stored in <code>server-vars.yml</code> will still be exists. If you only use <code>server-vars.yml</code> then you&rsquo;re good to go. The update process will not affecting your existing database.</p>

<p>SSH to your Open edX machine and do update
```</p>

<h1>sudo /edx/bin/update configuration release</h1>

<h1>sudo /edx/bin/update edx-platform release</h1>

<p>```</p>

<p>I experienced an error
<code>
error: invalid command 'egg_info'
</code></p>

<p>which can be resolved easily by
```</p>

<h1>pip install &mdash;upgrade setuptools</h1>

<p>```</p>

<p>After completed, do migrate for both LMS and CMS
```</p>

<h1>cd /edx/app/edxapp/edx-platform &amp;&amp; sudo -u www-data /edx/bin/python.edxapp manage.py lms syncdb &mdash;migrate &mdash;settings aws</h1>

<h1>cd /edx/app/edxapp/edx-platform &amp;&amp; sudo -u www-data /edx/bin/python.edxapp manage.py cms syncdb &mdash;migrate &mdash;settings aws</h1>

<p>```</p>

<p>And we are done. You have the latest Open edX code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing Open edX - Settings]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/25/customizing-open-edx-settings/"/>
    <updated>2015-07-25T20:24:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/25/customizing-open-edx-settings</id>
    <content type="html"><![CDATA[<p>After finished <a href="http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean/">OpenEdX installation</a> we need to modify some settings to change text, logo and activate some functionality: changing site name, using third party auth and many others. This is where things are a bit confusing because some documentations use different approach.</p>

<!-- more -->


<h2>Ways to update Open edX settings</h2>

<p>When reading several Open edX documentation, I found there are several methods to update Open edX settings:</p>

<ol>
<li>Update <code>server-vars.yml</code> at <code>/edx/app/edx_ansible/server-vars.yml</code></li>
<li>Update JSON config like <code>lms.env.json</code> or <code>cms.env.json</code> in <code>/edx/app/edxapp</code></li>
<li>Change <code>*.py</code> files in <code>/edx/app/edxapp/edx-platform/cms/envs</code> or <code>/edx/app/edxapp/edx-platform/lms/envs</code></li>
</ol>


<p>In tutorial about <a href="https://github.com/edx/edx-platform/wiki/Custom-Theming">custom theming</a>, it said we have to update <code>/edx/app/edx_ansible/server-vars.yml</code> then re run provisining script</p>

<p><code>
sudo /edx/bin/update edx-platform master
</code></p>

<p>In tutorial about <a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/mobile.html">setting up mobile application</a>, it said we need to update <code>edx/app/edxapp/lms.env.json</code> then restart the server with</p>

<p><code>
sudo /edx/bin/supervisorctl restart edxapp:
</code></p>

<p>In tutorial about <a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/enable_prerequisites.html">enabling course prerequisites</a>, we need to</p>

<blockquote><p>Set the value of MILESTONES_APP in the /cms/envs/common.py and /lms/envs/common.py files to True</p></blockquote>

<p>Then run database migration with (see <a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack">here</a> for how to manage Open edX full stack):</p>

<p>```</p>

<h1>sudo su edxapp -s /bin/bash</h1>

<h1>cd ~</h1>

<h1>source edxapp_env</h1>

<h1>python /edx/app/edxapp/edx-platform/manage.py {lms/cms} syncdb &mdash;migrate &mdash;settings aws</h1>

<p>```</p>

<p>Now, do all the methods is related? And what is recommended approach?</p>

<h2>How Open edX read settings</h2>

<p>Open edX app (CMS and LMS) both has <code>envs</code> folders consisted to several <code>*.py</code> files. Those files are there to provide default sane settings in case you as the developer or admin did not provide customized settings. That is usually the case when we start exploring Open edX (either dev-stack or full-stack installation).</p>

<p>We only need to pay attention to two files if you deploy full-stack like me. If you working on dev-stack there is one setting file for that environment too.</p>

<ol>
<li>common.py &ndash; contains <em>default</em> settings, so that reasonable things happen; this way a default setting just for django does not need to appear in a playbook. Rule of thumb:  Never change these, unless you are doing new application/component development, and you are setting a new <em>reasonable default</em> for your component.</li>
<li>aws.py &ndash; this file basically executes after common.py, and inspects the environment, including the json files in (<code>lms.env.json</code> and others) to see if some default should be modified.</li>
<li>devstack.py &ndash; builds on top of aws.py, changing any settings as appropriate so that it may run on development servers, and locally.</li>
</ol>


<p>So now we have link between updating <code>envs/aws.py</code> (3rd method) and <code>*.json</code> (2nd method). In general changes to <code>*.json</code> will be read and used to override default setting from <code>common.py</code></p>

<p>In case you notice, in database migration command above we passed parameter <code>--settings aws</code> which indicate that we want to use <code>envs/aws.py</code> as our settings.</p>

<p>Now, how it all connected to the <code>server-vars.yml</code> (1st method)? it turns out that <code>*.json</code> files is generated from <code>server-vars.yml</code> during ansible playbook process.</p>

<p>When we run our ansible install commands</p>

<p>```</p>

<h1>cd /var/tmp/configuration/playbooks &amp;&amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i &ldquo;localhost,&rdquo;</h1>

<p>```</p>

<p>It will create a four JSON config files:</p>

<p><code>
lms.env.json
lms.auth.json
cms.env.json
cms.auth.json
</code></p>

<p>Those json files is then read when <code>aws.py</code> is loaded.</p>

<h2>Working with settings</h2>

<p>For the full list of settings that you can override in <code>server-vars.yml</code> check <a href="https://github.com/edx/configuration/blob/master/playbooks/roles/edxapp/defaults/main.yml">here</a>. If you see <code>main.yml</code> file in previous link, there are more than 100 settings that you can tweak and set. We can pick one of the three methods above for development while we learn about Open edX and make sure those settings working as we expected.</p>

<p>For initial development purposes, we can start with creating our own settings file or modifying the one that used by default (<code>aws.py</code> in case of full stack install as we have) to experiment and determine what works. This is fast because we only need to restart the app after settings update.</p>

<p>Or we can start with modifying JSON file in <code>/edx/app/edxapp/*.json</code> and check in <code>aws.py</code> that the variable is read (if not, make sure that happens, and send in a Patch Request to contribute to Open edX). This is also fast because we only need to restart the app after settings update.</p>

<p>For long-term development purposes, it is better if we use <code>server-vars.yml</code> and to ensure that each variable is actually read in by <code>aws.py</code> (if not, make sure that happens, and send in a Patch Request to contribute to Open edX). <code>server-vars.yml</code> will then be read and used by the update command. Note that update command will run ansible playbook and it can take a while. Also if you updated your Open edX with the latest code from git, both JSON config files and envs folder will be reset. So its better to use <code>server-vars.yml</code>.</p>

<p>I am still learning Open edX and if you find any errors or have question or suggestion, please let me know.</p>

<p>Next, we will continue on customizing settings on our Open edX instance to enable third party auth and many others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Malware in Wordpress Site]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/24/remove-malware-in-wordpress-site/"/>
    <updated>2015-07-24T15:48:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/24/remove-malware-in-wordpress-site</id>
    <content type="html"><![CDATA[<p>Beside develop web application with Javascript, I also work as an IT support. I had to manage (setup and server side maintenance) several <a href="https://wordpress.org/">Wordpress</a> based company sites running on IIS 6.1 on Windows Server 2008. Lately, our latest sites has been infected with malware. This is the notes on how I clean those sites.</p>

<!-- more -->


<p>To start, let me say that I am not a security expert. If you find any errors within this post, let me know. I would be very grateful for that.</p>

<p>I am following notes on How To Remove Malware From WordPress <a href="http://securepress.org/tutorial-how-to-remove-malware.php">here</a>. Note that, for now, I skipped on cleaning the database. We will revisit this if needed later.</p>

<h2>Wordpress malware scanner</h2>

<p>Using Wordfence Scan plugin, my colleague who manage our site content, give me the list of malicious files:</p>

<p><code>
wp-content/themes/index.php
wp-content/plugins/index.php
wp-content/index.php
wp-includes/theme.php
</code></p>

<p>The infected file will looks like this
<img src="https://cldup.com/Q49Ty7wz0q.jpg" title="Infected index.php" alt="Infected index.php" /></p>

<p>The attack seems like related to the theme. Perhaps there is vurnerability in the third party theme that we used.</p>

<h2>Cleanup steps</h2>

<h3>1. Download latest wordpress</h3>

<p>Go to <a href="https://wordpress.org/download/">Wordpress official site</a> and download the latest version. Extract the zip into a location. We will use it as reference when we clean our files and folder</p>

<h3>2. Remove most of the files</h3>

<p>Before deleting all of the Wordpress files, you might want to make a copy of it first.</p>

<p>Delete everything in the site folder except for the <code>wp-content</code> folder, and the <code>wp-config.php</code> file. Your wordpress folder sites will looks like below:</p>

<p><code>
wp-content
wp-config.php
</code></p>

<h3>3. Inspect wp-config.php</h3>

<p>Check <code>wp-config.php</code> for any malicious content (random string and such). Use latest wordpress downloaded before as reference. You can also change Unique keys and salt using this <a href="https://api.wordpress.org/secret-key/1.1/salt/">wordpress service</a>.</p>

<h3>4. Inspect wp-content folder</h3>

<p>By default, <code>wp-content</code> folder should have following structure</p>

<p><code>
plugins
themes
uploads
index.php
</code></p>

<p>Since the content is managed by someone else, I proceed to delete all files except <code>uploads</code> folder. I will have to manually check that folder for malicious files (php files or anything that you may not have uploaded)</p>

<h3>5. Re upload wordpress and themes</h3>

<p>We can just copy and paste from latest wordpress files we downloaded earlier</p>

<p>And we are done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Open edX on Ubuntu 12.04 at Digital Ocean]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean/"/>
    <updated>2015-07-05T17:04:32+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean</id>
    <content type="html"><![CDATA[<p><a href="https://open.edx.org">Open edX</a> is the open source platform that powers <a href="https://www.edx.org/">edX</a> courses. It is freely available to the community. Institutions can host their own instances of Open edX and offer their own classes. Educators can extend the platform to build learning tools that precisely meet their needs. And developers can contribute new features to the Open edX platform. There are already many online course sites <a href="https://github.com/edx/edx-platform/wiki/Sites-powered-by-Open-edX">developed using Open edX</a>.</p>

<!-- more -->


<h3>Architecture</h3>

<p>Open edX consisting of several web applications, mostly written with Django Python. There are also mobile app for Android and iOS and analytics platform powered by Hadoop. It is quite complete and we can deploy it to have a complete online course experience. The architecture is explained <a href="https://open.edx.org/contributing-to-edx/architecture">here</a>.</p>

<p>Open edX has several components :</p>

<ul>
<li>LMS (App visible to students)</li>
<li>CMS (Studio. App visible to course creator)</li>
<li>cs_comment_service (Discussions)</li>
<li>MySQL (Database for user data and others)</li>
<li>Mongo (Database for course)</li>
<li>Mobile Apps (Android and iOS)</li>
<li>Analytics (Insight in edx.org)</li>
<li>Search with Elasticsearch</li>
<li>Background workers for various purposes (queued and distributed using Celery and RabbitMQ)</li>
</ul>


<h3>Installation</h3>

<p>To start with Open edX, we need to install it first. There are several options for Open edX platform installation:</p>

<ul>
<li>The Open edX Developer Stack, known as Devstack, is a Vagrant instance designed for local development.</li>
<li>Open edX Fullstack, known as Fullstack, has several deployment options:

<ul>
<li>Vagrant instance designed for deploying all edX services on a single server.</li>
<li>Open edX Fullstack on <a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation">Ubuntu 12.04 64 bit</a></li>
</ul>
</li>
</ul>


<p>All installation methods mentioned above are meant for development purposes and not live production websites, since all of the components (apps and databases) are installed on single servers.</p>

<p>Since my laptop is not suitable for work with VirtualBox, I opted to install Open edX on Ubuntu server on cloud. For the cloud provider, I choose <a href="https://www.digitalocean.com/">Digital Ocean</a>. Digital Ocean provide SSD backed cloud server and its quite cheap. And this is my Open edX installation notes on Ubuntu 12.04 at Digital Ocean. Note that this is based on my experience as of today (2015-07-05).</p>

<h3>Installation notes on Digital Ocean</h3>

<h4>Create a server</h4>

<p>First, create Digital Ocean account if you don&rsquo;t have one. You need to add your credit card so you can create your first droplet (server).</p>

<p>I choose droplet with 4 CPUs and 8 GB RAM ($80/mo). I think 2 CPUs and 4 GB RAM ($40/mo) could work but maybe installation will take a bit longer. Open edX has lots of components. Choose Image Ubuntu 12.04.5 x64.</p>

<p>I recommend to Add SSH keys for your Ubuntu server. It is considered more secure than password based access, and you don&rsquo;t have to type password each time you access it. You can follow <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">this tutorial</a> to create SSH key for your server.</p>

<p>This is my droplet summary</p>

<ul>
<li>Hostname : OpenEDX</li>
<li>Size : $80/mo</li>
<li>Region : Singapore 1</li>
<li>Image : 12.04.5 x64</li>
<li>Settings : none</li>
<li>SSH Keys : DigitalOcean</li>
</ul>


<p>When you&rsquo;re ready create your droplet. It will take about one minute.</p>

<h4>Add swap space</h4>

<p>Before we continue with Open edX installation. Lets create a swap space to add total amount of virtual memory allocated for our single server.</p>

<p>Again, folks and Digital Ocean has created <a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-12-04">a tutorial for creating swap space on Ubuntu server</a>. Follow those steps with one exception, I want to create a 8 GB swap space and I use this command:</p>

<p>```</p>

<h1>sudo dd if=/dev/zero of=/swapfile bs=1G count=8</h1>

<p>```</p>

<p>The tutorial page use 1024 bytes blocksize and it takes too long to create 8 GB swap. Plus, I am having hard time calculate the correct count (I experienced error that all the disk content is used as swap. Which is not what you want)</p>

<h4>Install Open edX</h4>

<p>After the server ready, now we can install Open edX. The install script is already available on Open edX repository on Github. We need to update the server first.</p>

<p>```</p>

<h1>sudo apt-get update -y</h1>

<h1>sudo apt-get upgrade -y</h1>

<h1>sudo apt-get install htop</h1>

<h1>sudo reboot</h1>

<p>```</p>

<p>I install htop so I can monitor what happens during installation. It takes a while and sometimes I wonder what is going on. Is it hang or doing something (compiling, downloading, etc)</p>

<p>Then run this command</p>

<p>```</p>

<h1>wget <a href="https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh">https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh</a> -O &ndash; | bash</h1>

<p>```</p>

<p>It will run ansible commands to install all required dependencies and services for running Open edX on single server.</p>

<p>While we wait, lets read some Open edX documentation</p>

<ul>
<li><a href="https://github.com/edx/edx-platform/wiki">https://github.com/edx/edx-platform/wiki</a></li>
<li><a href="https://github.com/edx/configuration/wiki">https://github.com/edx/configuration/wiki</a></li>
<li><a href="http://edx-developer-guide.readthedocs.org/">http://edx-developer-guide.readthedocs.org/</a></li>
<li><a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/">http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/</a></li>
<li><a href="http://edx.readthedocs.org/projects/xblock/en/latest/">http://edx.readthedocs.org/projects/xblock/en/latest/</a></li>
<li><a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/named-release-birch/">http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/named-release-birch/</a></li>
</ul>


<p>Then I experiences series of errors:</p>

<h5>Error 1</h5>

<p>```
Error
  Downloading dm.xmlsec.binding-1.3.2.tar.gz (119kB)</p>

<pre><code>Error: cannot get XMLSec1 pre-processor and compiler flags; do you have the `libxmlsec1` development package installed?
Complete output from command python setup.py egg_info:
Error: cannot get XMLSec1 pre-processor and compiler flags; do you have the `libxmlsec1` development package installed?

----------------------------------------
Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-RMvh3g/dm.xmlsec.binding
</code></pre>

<p>FATAL: all hosts have already failed &mdash; aborting
```</p>

<p>The install script is missing one package: <code>libxmlsec1-dev</code>. Let&rsquo;s install it</p>

<p>```</p>

<h1>sudo apt-get install libxmlsec1-dev</h1>

<p>```</p>

<p>Redo the process by calling</p>

<p>```</p>

<h1>wget <a href="https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh">https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh</a> -O &ndash; | bash</h1>

<p>```</p>

<p>Continue reading.</p>

<h5>Error 2</h5>

<p>```
Error</p>

<pre><code>swig -python -I/usr/include/python2.7 -I/usr/include/x86_64-linux-gnu -I/usr/include -I/usr/include/openssl -includeall -modern -o SWIG/_m2crypto_wrap.c SWIG/_m2crypto.i

unable to execute swig: No such file or directory

error: command 'swig' failed with exit status 1
</code></pre>

<p>```</p>

<p>The install script is again missing one package: <code>swig</code>.</p>

<p>```</p>

<h1>sudo apt-get install swig</h1>

<p>```</p>

<p>Redo the process</p>

<p>```</p>

<h1>wget <a href="https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh">https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh</a> -O &ndash; | bash</h1>

<p>```</p>

<p>And continue reading.</p>

<h5>Error 3</h5>

<p>```
&hellip;
&ndash; Migration &lsquo;student:0031_drop_student_anonymoususerid_temp_archive&rsquo; is marked for no-dry-run.</p>

<blockquote><p>student:0032_add_field_UserProfile_country_add_field_UserProfile_city
student:0032_auto<strong>add_loginfailures
student:0033_auto</strong>add_passwordhistory
student:0034_auto__add_courseaccessrole
student:0035_access_roles
 &ndash; Migration &lsquo;student:0035_access_roles&rsquo; is marked for no-dry-run.
 ! Error found during real run of migration! Aborting.</p></blockquote>

<p> ! Since you have a database that does not support running
 ! schema-altering statements in transactions, we have had
 ! to leave it in an interim state between migrations.</p>

<p>! You <em>might</em> be able to recover with:   (migration cannot be dry-run; cannot discover commands)
 ! The South developers regret this has happened, and would
 ! like to gently persuade you to consider a slightly
 ! easier-to-deal-with DBMS (one that supports DDL transactions)
 ! NOTE: The error which caused the migration to fail is further up.
Error in migration: student:0035_access_roles
changed: [localhost] => (item=cms)</p>

<p>FATAL: all hosts have already failed &mdash; aborting
```</p>

<p>This is error during database migration. I just redo the whole process.</p>

<p>You might wonder is it safe to redo the install process over and over again. It is safe because Ansible is designed to be idempotent which means that you can apply and re-apply it an infinite number of times without changing the result. I just assume the Open edX authors utilize idempotency in their Ansible playbooks.</p>

<h5>Error 4</h5>

<p>```
Error
failed: [localhost] => {&ldquo;failed&rdquo;: true, &ldquo;item&rdquo;: &ldquo;&rdquo;}
msg: Failed to validate the SSL certificate for download.elasticsearch.org:443. Use validate_certs=no or make sure your managed systems have a valid CA certificate installed. Paths checked for this platform: /etc/ssl/certs, /etc/pki/ca-trust/extracted/pem, /etc/pki/tls/certs, /usr/share/ca-certificates/cacert.org, /etc/ansible</p>

<p>FATAL: all hosts have already failed &mdash; aborting
```</p>

<p>It means we cannot proceed to download ElasticSearch installer because our system installed certificates do not recognize SSL used in download.elasticsearch.org. One way to fix this, as suggested by the error message, add <code>validate_certs=no</code> somewhere when we install ElasticSearch. Open playbook for ElasticSearch:</p>

<p>```</p>

<h1>nano /var/tmp/configuration/playbooks/roles/elasticsearch/tasks/main.yml</h1>

<p>```</p>

<p>At line 37, right after <code>force=no</code>, and press space to insert new line.
Type <code>validate_certs=no</code> in a new line.</p>

<p>Then redo install using following script:</p>

<p>```</p>

<h1>cd /var/tmp/configuration/playbooks &amp;&amp; sudo ansible-playbook -c local ./edx_sandbox.yml -i &ldquo;localhost,&rdquo;</h1>

<p>```</p>

<p>Note that I redo Ansible process by executing local script instead of fetching again from github because we don&rsquo;t want to lose our changes.</p>

<h4>Successful install</h4>

<p>After a while, finally there are no more errors on the installation process, and I have my Open edX running.</p>

<p>To make our life easier, I have <a href="https://github.com/arifsetiawan/configuration">forked edx configuration repo</a> and you can execute it on Ubuntu 12.04 machine with</p>

<p>```</p>

<h1>wget <a href="https://cdn.rawgit.com/arifsetiawan/configuration/master/util/install/sandbox.sh">https://cdn.rawgit.com/arifsetiawan/configuration/master/util/install/sandbox.sh</a> -O &ndash; | bash</h1>

<p>```</p>

<p>I am still learning Open edX and if you find any errors or have question or suggestion, please let me know.</p>

<p>Next, we will continue on exploring how settings work on our Open edX instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile .PHONY]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony/"/>
    <updated>2014-09-30T10:29:21+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony</id>
    <content type="html"><![CDATA[<p>Currently I am working on a Node.js module to abstract cloud storage interaction with filesystem idioms. My partner in the project suggested to use Makefile for running test scripts. So I created following Makefile</p>

<!-- more -->


<p>```
TESTS = test/*.js
REPORTER = dot</p>

<p>test:
  @NODE_ENV=test ./node_modules/.bin/mocha \</p>

<pre><code>--require should \
--reporter $(REPORTER) \
--timeout 5000 \
$(TESTS)
</code></pre>

<p>```</p>

<p>When I run <code>make test</code> I always got following response</p>

<p><code>
$ make test
make: `test' is up to date.
</code></p>

<p>So, what is the problem?</p>

<p>Apparently I have a folder named <code>test</code> (which contains all of test scripts). When I run <code>make test</code>, then Make command will be executed againts the <code>test</code> folder.</p>

<p>Enter .PHONY</p>

<p>If you have same command name and file/folder name on your project and you want to execute the command in Makefile, then you have to add .PHONY to tell the compiler to execute the command Makefile. The special rule .PHONY tells Make which targets are not files.</p>

<p>So update the Makefile to</p>

<p>```
TESTS = test/*.js
REPORTER = dot</p>

<p>test:
  @NODE_ENV=test ./node_modules/.bin/mocha \</p>

<pre><code>--require should \
--reporter $(REPORTER) \
--timeout 5000 \
$(TESTS)
</code></pre>

<p>.PHONY: test
```</p>

<p>And the tests are running</p>
]]></content>
  </entry>
  
</feed>
