<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2015-01-20T10:04:15+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using SSH on Azure Linux VM]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/01/20/using-ssh-on-azure-linux-vm/"/>
    <updated>2015-01-20T09:49:13+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/01/20/using-ssh-on-azure-linux-vm</id>
    <content type="html"><![CDATA[<p>Typing password is a time wasting process. It is recommended to use SSH with public private keys to access Linux VM box. To do that in Azure, first you need to create a key pair using following command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout MyAzure.key -out MyAzure.pem</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Then you can :</p>

<ul>
<li>Proceed to create VM in using Azure portal (recommended for beginners and when you don&rsquo;t need some sort of automation). You need to upload .pem file.</li>
<li>Use azure cli to create your VM from command line (advanced user). Details on this available in my <a href="https://gist.github.com/arifsetiawan/afcf9adeb9922066f81f">gist here</a></li>
</ul>


<p>To use SSH key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i C:\\FOLDER_NAME\\MyAzure.key USER@DOMAIN.cloudapp.net</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues on Using Iisnode on Windows 7]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7/"/>
    <updated>2014-11-13T07:16:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7</id>
    <content type="html"><![CDATA[<p><strong> Update </strong></p>

<p>I found the issue with the Azure website. Sailsjs is actually working well. The issue is that I used Azure free tier and free tier is going idle (IIS app pool timeout) after some time if not used. This caused some errors when I tried to access it from browser (that&rsquo;s when the app started again). I tried to use <a href="https://uptimerobot.com/">uptimerobot</a> to check the site every 5 minutes so it will not go idle. I still found the website is stopped this morning.</p>

<p><strong> end of update </strong></p>

<p>I started to use <a href="http://sailsjs.org/">sailsjs</a> in my latest project. When I deployed it to Azure Web Sites, the web is not working. Sometimes I can access it, but most of the time I just can&rsquo;t. So I went to install IIS and iisnode on my Windows 7 machine to test the sailsjs on IIS deployment on local dev machine. Maybe I can figure out what went wrong. But what I found is series on errors when trying to run simple iisnode example.</p>

<!-- more -->


<p>So the example can be accessed on <a href="http://localhost/node">http://localhost/node</a></p>

<h3>Error #1. 500.19 with Error Code 0x80070021</h3>

<p>This happened whn I tried to click on of the example on <a href="http://localhost/node">http://localhost/node</a> page</p>

<p>Description</p>

<blockquote><p>Config Error  This configuration section cannot be used at this path. This happens when the section is locked at a parent level. Locking is either by default (overrideModeDefault=&ldquo;Deny&rdquo;), or set explicitly by a location tag with overrideMode=&ldquo;Deny&rdquo; or the legacy allowOverride=&ldquo;false&rdquo;.</p></blockquote>

<p>I spent hours trying to resolve this error. This <a href="https://github.com/tjanczuk/iisnode/issues/52">issue</a> suggested to <strong>Set the Handler Mappings to Read/Write</strong>. I checked and its set correctly but still no luck.</p>

<p>Then I fount this <a href="http://www.codeproject.com/Questions/390725/HTTP-Error-Internal-Server-Error">question</a> which linked to this <a href="http://www.donnfelker.com/iis-7-this-configuration-section-cannot-be-used-at-this-path/">blog</a>.</p>

<p>So following the answer :</p>

<ol>
<li>Open the applicationHost.config file, located here: %windir%\system32\inetsrv\config\applicationHost.config</li>
<li>Edit the &ldquo;handlers&rdquo; section.</li>
<li>Change this line:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;section name=”handlers” overrideModeDefault=”Deny” /&gt;
</span><span class='line'>  To:
</span><span class='line'>  &lt;section name=”handlers” overrideModeDefault=”Allow” /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now its working. I can click one of the example. Lets go to <a href="http://localhost/node/helloworld/readme.htm">helloworld</a></p>

<h3>Error #2. Nodejs path issue</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a></p>

<p>Description</p>

<blockquote><p>The iisnode module is unable to start the node.exe process. Make sure the node.exe executable is available at the location specified in the system.webServer/iisnode/@nodeProcessCommandLine element of web.config. By default node.exe is expected in one of the directories listed in the PATH environment variable.</p></blockquote>

<p>This one is easy, I use nodist which put node.exe on non default PATH. Add this line to <code>web.config</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;iisnode
</span><span class='line'>  nodeProcessCommandLine="&quot;C:\Users\ArifSetiawan\Repository\nodist\bin\node.exe&quot;" 
</span><span class='line'>/&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Error #3. 500.1000 with Error Code 0x00000005</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a>. New error.</p>

<p>I spent another hours on this one. I tried to install ASP, ASP.NET and .NET Extensibility Features on IIS. Then running <code>aspnet_regiis.exe -i</code>. But still have the error!</p>

<p>Any thoughts?</p>

<p>As for me, I will just use Linux box. It&rsquo;s a shame because Azure Website scalability is a big plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add User to MongoDB]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/11/11/add-user-to-mongodb/"/>
    <updated>2014-11-11T09:41:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/11/11/add-user-to-mongodb</id>
    <content type="html"><![CDATA[<p>MongoDB is easy enough to use that you don&rsquo;t even have to think about adding user when start using it. This could lead to a problem down the road when you are need to open your database access to public internet. And also the provided free version do not support SSL!. But that is another issue.</p>

<p>For now, lets take note on how we can start adding user (and password) to protect our database access.</p>

<!-- more -->


<h3>Add admin</h3>

<p>First you want to start add admin user which can manage other users</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo</span></code></pre></td></tr></table></div></figure>


<p>then in Mongo shell</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use admin</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.createUser(
</span><span class='line'>  {
</span><span class='line'>    user: "admin",
</span><span class='line'>    pwd: "adminpass",
</span><span class='line'>    roles:
</span><span class='line'>    [
</span><span class='line'>      {
</span><span class='line'>        role: "userAdminAnyDatabase",
</span><span class='line'>        db: "admin"
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Then exit shell by <code>Ctrl+C</code> or type <code>exit</code></p>

<h3>Enable auth on MongoD</h3>

<p>edit the mongo conf file with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo nano /etc/mongod.conf</span></code></pre></td></tr></table></div></figure>


<p>Uncomment this line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth=true</span></code></pre></td></tr></table></div></figure>


<p>If you want to access from other machine change the line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind_ip=127.0.0.1</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind_ip=0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p>More protection is necessary in production servers. I will explore this later.</p>

<p>Then restart mongod</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service mongod restart</span></code></pre></td></tr></table></div></figure>


<h3>Add user to the database</h3>

<p>Open Mongo shell</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use admin
</span><span class='line'>&gt; db.auth("admin","pwd:"adminpass")</span></code></pre></td></tr></table></div></figure>


<p>Add new database and its user</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use newdb
</span><span class='line'>&gt; db.createUser(
</span><span class='line'>  {
</span><span class='line'>    user: "user",
</span><span class='line'>    pwd: "pass",
</span><span class='line'>    roles:
</span><span class='line'>    [
</span><span class='line'>      {
</span><span class='line'>        role: "dbOwner",
</span><span class='line'>        db: "newdb"
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>)
</span><span class='line'>&gt; db.auth("user","pass")
</span><span class='line'>&gt; show collections</span></code></pre></td></tr></table></div></figure>


<p>There you have it. Now your MongoDB is user-password protected. Its a small step but necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly Node.js Error Message]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message/"/>
    <updated>2014-10-01T11:21:23+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message</id>
    <content type="html"><![CDATA[<p>While working with Node.js, I used <code>fs</code> module often. One function that I used frequently is <code>fs.exists()</code> to check if the file is there before doing any processing. Today, I read through Node.js <code>fs</code> documentation and found the following :</p>

<!-- more -->


<blockquote><p>fs.exists() is an anachronism and exists only for historical reasons. There should almost never be a reason to use it in your own code.</p>

<p>In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open(). Just open the file and handle the error when it&rsquo;s not there.</p></blockquote>

<p>It make sense. Suppose we want to get file stat using <code>fs.stat()</code>, just call the function and see the error code. If the file is not exists, then you will have this error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="p">[</span><span class="nb">Error</span><span class="o">:</span> <span class="nx">ENOENT</span><span class="p">,</span> <span class="nx">stat</span> <span class="s1">&#39;c:\Users\ArifSetiawan\Repository\CymbRef\cmd\somefile&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">errno</span><span class="o">:</span> <span class="mi">34</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">code</span><span class="o">:</span> <span class="s1">&#39;ENOENT&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;c:\\Users\\ArifSetiawan\\Repository\\CymbRef\\cmd\\somefile&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Node.js use POSIX codes to denote errors and its <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html">a long list</a>. How do you translate the error <strong>ENOENT</strong> into friendly error message. Do you even know that <strong>ENOENT</strong> means <code>No such file or directory</code>?</p>

<p>Lucky for us, Rod Vagg (<a href="https://github.com/rvagg">rvagg</a>) has created a node modules which give description for all kinds of errno in Node.js named <a href="https://github.com/rvagg/node-errno">errno</a>. Using example from the readme :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">errno</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;errno&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;Error: &#39;</span>
</span><span class='line'>    <span class="c1">// if it&#39;s a libuv error then get the description from errno</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">].</span><span class="nx">description</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if it&#39;s a `fs` error then it&#39;ll have a &#39;path&#39; property</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39; [&#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="s1">&#39;filenotexists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can have human friendly readable error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: no such file or directory [c:\Users\ArifSetiawan\Repository\CymbRef\cmd\filenotexists]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile .PHONY]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony/"/>
    <updated>2014-09-30T10:29:21+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony</id>
    <content type="html"><![CDATA[<p>Currently I am working on a Node.js module to abstract cloud storage interaction with filesystem idioms. My partner in the project suggested to use Makefile for running test scripts. So I created following Makefile</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TESTS = test/*.js
</span><span class='line'>REPORTER = dot
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  @NODE_ENV=test ./node_modules/.bin/mocha \
</span><span class='line'>    --require should \
</span><span class='line'>    --reporter $(REPORTER) \
</span><span class='line'>    --timeout 5000 \
</span><span class='line'>    $(TESTS)</span></code></pre></td></tr></table></div></figure>


<p>When I run <code>make test</code> I always got following response</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make test
</span><span class='line'>make: `test' is up to date.</span></code></pre></td></tr></table></div></figure>


<p>So, what is the problem?</p>

<p>Apparently I have a folder named <code>test</code> (which contains all of test scripts). When I run <code>make test</code>, then Make command will be executed againts the <code>test</code> folder.</p>

<p>Enter .PHONY</p>

<p>If you have same command name and file/folder name on your project and you want to execute the command in Makefile, then you have to add .PHONY to tell the compiler to execute the command Makefile. The special rule .PHONY tells Make which targets are not files.</p>

<p>So update the Makefile to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TESTS = test/*.js
</span><span class='line'>REPORTER = dot
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  @NODE_ENV=test ./node_modules/.bin/mocha \
</span><span class='line'>    --require should \
</span><span class='line'>    --reporter $(REPORTER) \
</span><span class='line'>    --timeout 5000 \
</span><span class='line'>    $(TESTS)
</span><span class='line'>
</span><span class='line'>.PHONY: test</span></code></pre></td></tr></table></div></figure>


<p>And the tests are running</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resumable Download and Upload With Qt]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/21/resumable-download-and-upload-with-qt/"/>
    <updated>2014-09-21T21:37:51+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/21/resumable-download-and-upload-with-qt</id>
    <content type="html"><![CDATA[<p><a href="http://qt-project.org/">Qt</a> is one of my favorite C++ framework. It provides great IDE, GUI components that easy to use and its signal slot mechanism is powerful. I did a lot of work with Qt a while back and wrote some Qt apps for Symbian and Meego (It&rsquo;s unfortunate that both platform is dead now). I can say that coding with Qt is fun.</p>

<!-- more -->


<p>One of the project that I did required a resumable download and upload. How we can have a a resumable download and upload client?</p>

<h2>Resumable download</h2>

<p>The code is available <a href="https://github.com/arifsetiawan/qt-download-plugin">here</a></p>

<p>The key part in resumable download is HTTP header <a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#range-request-header"><code>Range</code></a>. Range header allow us to request only part of an entity, starting from specified bytes. Example of Range header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Range: bytes=500-999</span></code></pre></td></tr></table></div></figure>


<p>When we received bytes of the file, we store those bytes into a file. If connection stopped and we want to resume, we simply get the size of downloaded part and continue from there by specifying the start bytes. See <a href="https://github.com/arifsetiawan/qt-download-plugin/blob/master/downloadplugin.cpp#L184-L187">here</a> for the relevant part of the code.</p>

<h2>Resumable upload</h2>

<p>The code is available <a href="https://github.com/arifsetiawan/qt-upload-plugin">here</a></p>

<p>To enable resumable upload we have to use new approach on the server side too. Simply user standard HTTP POST with <code>Content-Type: multipart/form-data</code> just doesn&rsquo;t cut it. One protocol that specify how we can create reliable and resumable file upload is <a href="http://tus.io/">tus</a>. The tl;dr is</p>

<ul>
<li>POST to create new file with file size included in header, server will create the file id and sent it back</li>
<li>HEAD to get current file size, server will return <code>offset</code> value on response header</li>
<li>PATCH to send file data start from <code>offset</code> value. Client will upload file in several chunks.</li>
</ul>


<h2>Both in one application</h2>

<p>You can see both download and upload plugin integrated in one sample application <a href="https://github.com/arifsetiawan/qt-plugin-host">here</a>. Note that to test resumable upload with tus, you should prepare you own tus server. You can choose several tus server implementation from <a href="http://tus.io/implementations.html">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatten Node_modules]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules/"/>
    <updated>2014-09-21T05:45:42+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules</id>
    <content type="html"><![CDATA[<p>If you worked with Node.js, you might start notice youd node_modules started to simply nested into the abyss and the path is getting longer and longer. Consider this :</p>

<p><code>/C/Users/ArifSetiawan/Repository/Katch/katch/node_modules/sails/node_modules/grunt-contrib-less/node_modules/less/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-handle-source-errors.js</code></p>

<p>Yes, it is a headache to see deeply nested node_modules. You got more headache when you see that there are some duplicated node_modules pop out elsewhere. Well, the headache part is subjective my opinion.</p>

<!-- more -->


<p>I think <a href="https://www.npmjs.org/">npm</a> is designed to work in fire and forget style, when you install a module, you don&rsquo;t have to think dependencies hell where some modules require one module with different version number. If you install the latest, then other module simply break. You can&rsquo;t control that other modules author might choose to ignore if their modules dependency is updated with breaking changes. The solution is thet each module has its own <code>node_modules</code> and each module in <code>node_modules</code> has its own <code>node_modules</code> and so on.</p>

<p>A while ago, I wrote a Node.js module named <strong>flatten-packages</strong> that will flatten your node_modules into one level and removing all duplicates by aggressiely delete old version when new one is found. You can find the project on <a href="https://github.com/arifsetiawan/flatten">github</a>. There are things to consider when using <strong>flatten-packages</strong>:</p>

<ul>
<li>Your node_modules folder might explode with numbers of previously nested node_modules.</li>
<li>Version changes might break some of your dependency</li>
<li>You might be confused when trying to relate your package.json with exploded node_modules</li>
</ul>


<p>With <code>flatten-packages -i</code> command, you can get summary of your node_modules hierarcy.</p>

<p>Sample <code>flatten-packages -i</code> output</p>

<p><img src="http://blog.infinitesquares.net/images/posts/flatten_node_modules_small.png" title="Flatten small" alt="Flatten small" /></p>

<p>From 17 modules into 73 modules. I can live with that</p>

<p>Now consider this</p>

<p><img src="http://blog.infinitesquares.net/images/posts/flatten_node_modules_big.png" title="Flatten big" alt="Flatten big" /></p>

<p>8 layers deep of node_modules with 514 duplicates! If I flatten it, my node_modules folder with explode from 33 modules into 271 modules!</p>

<p>As I have said before, with npm you shouldn&rsquo;t worry about those deeply nested node_modules which cause <a href="https://github.com/joyent/node/issues/6960">Windows issue when filename has more than 260 characters</a> and modules duplicates (514 in above case) that eat up your disk space (disk is cheap now). It&rsquo;s just unlucky for me to work on Windows with ony 10 GB to spare. That what causes my headache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Npm]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm/"/>
    <updated>2014-09-20T17:19:15+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.org/">NPM (Node Packaged Modules)</a> is indespensable part of <a href="http://nodejs.org/">Node.js</a> ecosystem. Knowing how to use npm is really important when working on Node.js project. Some of the npm commands :</p>

<ul>
<li><code>npm init</code> &ndash;> create package.json file to start a Node.js project</li>
<li><code>npm install MODULENAME --save</code> &ndash;> install module and save to dependencies in package.json</li>
<li><code>npm install MODULENAME --save-dev</code> &ndash;> install module and save to devDependencies in package.json</li>
<li><code>npm install --production</code> &ndash;> skip devDependencies install</li>
<li><code>npm shrinkwrap</code> &ndash;> lock modules version dependency for the app</li>
<li><code>npm view -g --depth=0</code> &ndash;> list global installed modules</li>
<li><code>npm view MODULENAME</code> &ndash;> view module metadata on npmjs registry, you can check available versions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resizing MongoDB Data Disk]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk/"/>
    <updated>2014-09-17T06:19:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk</id>
    <content type="html"><![CDATA[<p>I received a message saying the are issue in our Node.js app running on Azure: Can&rsquo;t take a write lock while out of disk space. The issue is clear enough: our MongoDB data disk is run out. I will outlined steps how we can resize MongoDB data disk. Well, it&rsquo;s not actually that hard. Simplified steps are :</p>

<!-- more -->


<ul>
<li>Prepare bigger data disk</li>
<li>Copy all old MongoDB data from old disk to new one</li>
<li>Update MongoDB config</li>
<li>Restart MongoDB service</li>
</ul>


<p>Start with preparing bigger disk space. On Azure, follow this tutorial on <a href="http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-how-to-attach-disk/">How to Attach a Data Disk to a Linux Virtual Machine</a></p>

<p>Then create MongoDB data folder and make sure to change ownership of the folder to mongod or you will have write access issue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /mongodata
</span><span class='line'>$ sudo chown -R mongod:mongod /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Copy all old data to new folder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -r /oldmongodata /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Use option <code>-v</code> if you want to see the copying progree, or if you forget to do that use this command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ watch ls -lah /mongodata</span></code></pre></td></tr></table></div></figure>


<p>When copy completed, open MongoDb config file (usually in <code>/etc/mongod.conf</code>) and update the dbpath to the new data folder.</p>

<p>Restart the service</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service mongod start</span></code></pre></td></tr></table></div></figure>


<p>While the resizing MongoDB data disk is quite simple, disk run out issue should not be happening during production server deployment. One possible approach to minimize the risk is to create reporting daemon (or use third party service) to monitor server stats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server Setup]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup/"/>
    <updated>2014-09-16T10:19:45+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup</id>
    <content type="html"><![CDATA[<p>When I started new Ubuntu machine on <a href="http://azure.microsoft.com/en-us/">Azure</a> or <a href="https://www.digitalocean.com/">DigitalOcean</a>, I usually install some applications such as <a href="http://nodejs.org/">Node.js</a>, <a href="http://www.mongodb.org/">MongoDB</a> and <a href="http://nginx.org/">Nginx</a> and <a href="http://git-scm.com/">Git</a>. To make things easier, I created a shell script that will do all that process.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># !/bin/sh</span>
</span><span class='line'><span class="c"># update</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get -y upgrade
</span><span class='line'>sudo apt-get -y install build-essential libssl-dev
</span><span class='line'>
</span><span class='line'><span class="c"># nodejs</span>
</span><span class='line'>sudo add-apt-repository -y ppa:chris-lea/node.js
</span><span class='line'>
</span><span class='line'><span class="c"># nginx</span>
</span><span class='line'>sudo add-apt-repository -y ppa:nginx/stable
</span><span class='line'>
</span><span class='line'><span class="c"># mongodb</span>
</span><span class='line'>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39;</span> | sudo tee /etc/apt/sources.list.d/mongodb.list
</span><span class='line'>
</span><span class='line'><span class="c"># git</span>
</span><span class='line'>sudo add-apt-repository -y ppa:git-core/ppa
</span><span class='line'>
</span><span class='line'><span class="c"># redis</span>
</span><span class='line'>sudo add-apt-repository -y ppa:rwky/redis
</span><span class='line'>
</span><span class='line'><span class="c"># update repo</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get dist-upgrade
</span><span class='line'>
</span><span class='line'><span class="c"># install</span>
</span><span class='line'>sudo apt-get -y install nodejs nginx mongodb-org git ufw redis-server
</span><span class='line'>
</span><span class='line'><span class="c"># start mongod</span>
</span><span class='line'>sudo service mongod start
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using <a href="https://www.docker.com/">docker</a> would be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Commands]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/10/github-commands/"/>
    <updated>2014-09-10T14:15:37+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/10/github-commands</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> is very powerful distributed revision control. It has lots of commands but I only use several of them. I often forget some of the rarely used git commands so I make notes here.</p>

<ul>
<li><code>git clone REPOURL LOCALFOLDER</code> &ndash;> obviously to clone</li>
<li><code>git status</code> &ndash;> get status of what files are modified, added or deleted</li>
</ul>


<!-- more -->


<ul>
<li><code>git log</code> &ndash;> get commit log</li>
<li><code>git checkout -b NEWBRANCH</code> &ndash;> create new branch from existing</li>
<li><code>git checkout BRANCH</code> &ndash;> checkout the branch.</li>
<li><code>git add .</code> &ndash;> add updated files into staging</li>
<li><code>git commit -am "commit message"</code> &ndash;> commit staging</li>
<li><code>git push REMOTE BRANCH</code> &ndash;> push to remote</li>
<li><code>git fetch REMOTE</code> &ndash;> get update from remote</li>
<li><code>git merge REMOTE/BRANCH</code> &ndash;> merge with remote branch</li>
<li><code>git pull REMOTE BRANCH</code> &ndash;> fetch and merge from remote branch</li>
<li><code>git rm --cached FILE</code> &ndash;> remove file from git cache</li>
<li><code>git rm -r --cached FOLDER</code> &ndash;> remove folder from git cache</li>
<li><code>git checkout -- .</code> &ndash;> reset all current changes</li>
</ul>


<p>Here are some not-so-common git command that I found out based on necessity</p>

<ul>
<li><code>git checkout SHA</code> &ndash;> checkout the commit SHA</li>
<li><code>git diff --name-status SHA1 SHA2</code> &ndash;> check what file is changed between two commits</li>
<li><code>git reset HEAD -- .</code> &ndash;> clear staging</li>
<li><code>git merge --abort</code> &ndash;> cancel merge</li>
<li><code>git reset --hard HEAD~1</code> &ndash;> nuke the last commit</li>
<li><code>git branch -a</code> &ndash;> list all branch remote and local</li>
<li><code>git branch -r</code> &ndash;> list remote branch</li>
<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> &ndash;> rename any branch</li>
<li><code>git branch -m &lt;newname&gt;</code> &ndash;> rename current branch</li>
<li><code>git branch -d &lt;branch&gt;</code> &ndash;> delete branch</li>
<li><code>git push origin newname</code> &ndash;> push new branch to remote</li>
<li><code>git push origin :oldname</code> &ndash;> remove old branch from remote</li>
<li><code>git clean -fx</code> &ndash;> delete untracked files and directories, -f force, -n directory</li>
<li><code>git clean -n</code> &ndash;> clean dry run, list what to be deleted</li>
<li><code>git checkout -- FILENAME</code> &ndash;> cancel changes on a filename</li>
<li><code>git log -- FILENAME</code> &ndash;> change a file changing history</li>
</ul>


<p>Replace master branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// on development machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git branch -m newbranch master
</span><span class='line'>git push -f origin master
</span><span class='line'>
</span><span class='line'>// on deployment machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git fetch
</span><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Delete history of a file. This is useful if you accidentally included a file that should not be included (contains sensitive information)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILENAME' --prune-empty --tag-name-filter cat -- --all
</span><span class='line'>git push --force --verbose --dry-run
</span><span class='line'>git push --force</span></code></pre></td></tr></table></div></figure>


<p>I will add more when I found out other git commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Project Base Template]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template/"/>
    <updated>2014-09-09T15:11:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template</id>
    <content type="html"><![CDATA[<p>There are many Node.js starting template, and after working couple times with <a href="http://expressjs.com/">Expressjs</a>, I also ended up creating my own base template. You can check it out <a href="https://github.com/arifsetiawan/node-base">here</a>.</p>

<!-- more -->


<p>Base template ideally support your workflow and it has some structure to organize your code. My base template is not meant to be a full fledged framework like <a href="http://sailsjs.org/">sailsjs</a>, it just a bunch of codes that I would like to be readily available when I started a Node.js project. As I work more with Node.js, my base template will be evolving.</p>

<h2>Components</h2>

<ul>
<li>MongoDB as database</li>
<li>Passport to manage authentication with session stored in MongoDB</li>
<li>Formidable for multipart post</li>
<li>Swig as templating engine</li>
<li>Generic MongoDB query</li>
<li>Front end components

<ul>
<li>Bootstrap</li>
<li>Font awesome</li>
<li>jQuery</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://blog.infinitesquares.net/blog/2013/11/21/hello-world/"/>
    <updated>2013-11-21T13:43:28+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2013/11/21/hello-world</id>
    <content type="html"><![CDATA[<p>Starting to blog with octopress! blogging with markdown is fun!</p>

<h2>Steps on blogging with Octopress</h2>

<p>(So I don&rsquo;t always google)</p>

<!-- more -->


<p>Notes copied from <a href="http://octopress.org/docs/blogging/">octopress docs</a></p>

<h3>New article</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["This is awesome article title!"]</span></code></pre></td></tr></table></div></figure>


<p>edit headers, add categories. Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># One category
</span><span class='line'>categories: Code
</span><span class='line'> 
</span><span class='line'># Multiple categories example 1
</span><span class='line'>categories: [Code, C++]
</span><span class='line'> 
</span><span class='line'># Multiple categories example 2
</span><span class='line'>categories:
</span><span class='line'>- Code
</span><span class='line'>- C++</span></code></pre></td></tr></table></div></figure>


<h3>New Pages</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[super-awesome]
</span><span class='line'># creates /source/super-awesome/index.markdown</span></code></pre></td></tr></table></div></figure>


<h3>Content</h3>

<p>Inserting <code>&lt;!-- more --&gt;</code> will prevent the post content below this mark from being displayed on the index page for the blog posts</p>

<h3>Generate, Preview, Publish</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake generate   # Generates posts and pages into the public directory
</span><span class='line'>bundle exec rake preview    # Watches, and mounts a webserver at http://localhost:4000
</span><span class='line'>bundle exec rake deploy     # Deploy to git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
