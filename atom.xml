<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2014-09-18T11:10:46+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resizing MongoDB Data Disk]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk/"/>
    <updated>2014-09-17T06:19:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk</id>
    <content type="html"><![CDATA[<p>I received a message saying the are issue in our Node.js app running on Azure: Can&rsquo;t take a write lock while out of disk space. The issue is clear enough: our MongoDB data disk is run out. I will outlined steps how we can resize MongoDB data disk. Well, it&rsquo;s not actually that hard. Simplified steps are :</p>

<!-- more -->


<ul>
<li>Prepare bigger data disk</li>
<li>Copy all old MongoDB data from old disk to new one</li>
<li>Update MongoDB config</li>
<li>Restart MongoDB service</li>
</ul>


<p>Start with preparing bigger disk space. On Azure, follow this tutorial on <a href="http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-how-to-attach-disk/">How to Attach a Data Disk to a Linux Virtual Machine</a></p>

<p>Then create MongoDB data folder and make sure to change ownership of the folder to mongod or you will have write access issue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /mongodata
</span><span class='line'>$ sudo chown -R mongod:mongod /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Copy all old data to new folder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -r /oldmongodata /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Use option <code>-v</code> if you want to see the copying progree, or if you forget to do that use this command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ watch ls -lah /mongodata</span></code></pre></td></tr></table></div></figure>


<p>When copy completed, open MongoDb config file (usually in <code>/etc/mongod.conf</code>) and update the dbpath to the new data folder.</p>

<p>Restart the service</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service mongod start</span></code></pre></td></tr></table></div></figure>


<p>While the resizing MongoDB data disk is quite simple, disk run out issue should not be happening during production server deployment. One possible approach to minimize the risk is to create reporting daemon (or use third party service) to monitor server stats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server Setup]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup/"/>
    <updated>2014-09-16T10:19:45+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup</id>
    <content type="html"><![CDATA[<p>When I started new Ubuntu machine on <a href="http://azure.microsoft.com/en-us/">Azure</a> or <a href="https://www.digitalocean.com/">DigitalOcean</a>, I usually install some applications such as <a href="http://nodejs.org/">Node.js</a>, <a href="http://www.mongodb.org/">MongoDB</a> and <a href="http://nginx.org/">Nginx</a> and <a href="http://git-scm.com/">Git</a>. To make things easier, I created a shell script that will do all that process.</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># !/bin/sh
</span><span class='line'># update
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get -y upgrade
</span><span class='line'>sudo apt-get -y install build-essential libssl-dev
</span><span class='line'>
</span><span class='line'># nodejs
</span><span class='line'>sudo add-apt-repository -y ppa:chris-lea/node.js
</span><span class='line'>
</span><span class='line'># nginx
</span><span class='line'>sudo add-apt-repository -y ppa:nginx/stable
</span><span class='line'>
</span><span class='line'># mongodb
</span><span class='line'>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'>echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list
</span><span class='line'>
</span><span class='line'># git
</span><span class='line'>sudo add-apt-repository -y ppa:git-core/ppa
</span><span class='line'>
</span><span class='line'># update repo
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get dist-upgrade
</span><span class='line'>
</span><span class='line'># install
</span><span class='line'>sudo apt-get -y install nodejs nginx mongodb-org git ufw
</span><span class='line'>
</span><span class='line'># start mongod
</span><span class='line'>sudo service mongod start</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using <a href="https://www.docker.com/">docker</a> would be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Commands]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/10/github-commands/"/>
    <updated>2014-09-10T14:15:37+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/10/github-commands</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> is very powerful distributed revision control. It has lots of commands but I only use several of them. I often forget some of the rarely used git commands so I make notes here.</p>

<ul>
<li><code>git clone REPOURL LOCALFOLDER</code> &ndash;> obviously to clone</li>
<li><code>git status</code> &ndash;> get status of what files are modified, added or deleted</li>
</ul>


<!-- more -->


<ul>
<li><code>git log</code> &ndash;> get commit log</li>
<li><code>git checkout -b NEWBRANCH</code> &ndash;> create new branch from existing</li>
<li><code>git checkout BRANCH</code> &ndash;> checkout the branch.</li>
<li><code>git add .</code> &ndash;> add updated files into staging</li>
<li><code>git commit -am "commit message"</code> &ndash;> commit staging</li>
<li><code>git push REMOTE BRANCH</code> &ndash;> push to remote</li>
<li><code>git fetch REMOTE</code> &ndash;> get update from remote</li>
<li><code>git merge REMOTE/BRANCH</code> &ndash;> merge with remote branch</li>
<li><code>git pull REMOTE BRANCH</code> &ndash;> fetch and merge from remote branch</li>
<li><code>git rm --cached FILE</code> &ndash;> remove file from git cache</li>
<li><code>git rm -r --cached FOLDER</code> &ndash;> remove folder from git cache</li>
<li><code>git checkout -- .</code> &ndash;> reset all current changes</li>
</ul>


<p>Here are some not-so-common git command that I found out based on necessity</p>

<ul>
<li><code>git checkout SHA</code> &ndash;> checkout the commit SHA</li>
<li><code>git diff --name-status SHA1 SHA2</code> &ndash;> check what file is changed between two commits</li>
<li><code>git reset HEAD -- .</code> &ndash;> clear staging</li>
<li><code>git merge --abort</code> &ndash;> cancel merge</li>
<li><code>git reset --hard HEAD~1</code> &ndash;> nuke the last commit</li>
<li><code>git branch -a</code> &ndash;> list all branch remote and local</li>
<li><code>git branch -r</code> &ndash;> list remote branch</li>
<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> &ndash;> rename any branch</li>
<li><code>git branch -m &lt;newname&gt;</code> &ndash;> rename current branch</li>
<li><code>git branch -d &lt;branch&gt;</code> &ndash;> delete branch</li>
<li><code>git push origin newname</code> &ndash;> push new branch to remote</li>
<li><code>git push origin :oldname</code> &ndash;> remove old branch from remote</li>
<li><code>git clean -fx</code> &ndash;> delete untracked files and directories, -f force, -n directory</li>
<li><code>git clean -n</code> &ndash;> clean dry run, list what to be deleted</li>
</ul>


<p>Replace master branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// on development machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git branch -m newbranch master
</span><span class='line'>git push -f origin master
</span><span class='line'>
</span><span class='line'>// on deployment machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git fetch
</span><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>I will add more when I found out other git commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Project Base Template]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template/"/>
    <updated>2014-09-09T15:11:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template</id>
    <content type="html"><![CDATA[<p>There are many Node.js starting template, and after working couple times with <a href="http://expressjs.com/">Expressjs</a>, I also ended up creating my own base template. You can check it out <a href="https://github.com/arifsetiawan/node-base">here</a>.</p>

<!-- more -->


<p>Base template ideally support your workflow and it has some structure to organize your code. My base template is not meant to be a full fledged framework like <a href="http://sailsjs.org/">sailsjs</a>, it just a bunch of codes that I would like to be readily available when I started a Node.js project. As I work more with Node.js, my base template will be evolving.</p>

<h2>Components</h2>

<ul>
<li>MongoDB as database</li>
<li>Passport to manage authentication with session stored in MongoDB</li>
<li>Formidable for multipart post</li>
<li>Swig as templating engine</li>
<li>Generic MongoDB query</li>
<li>Front end components

<ul>
<li>Bootstrap</li>
<li>Font awesome</li>
<li>jQuery</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://blog.infinitesquares.net/blog/2013/11/21/hello-world/"/>
    <updated>2013-11-21T13:43:28+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2013/11/21/hello-world</id>
    <content type="html"><![CDATA[<p>Starting to blog with octopress! blogging with markdown is fun!</p>

<h2>Steps on blogging with Octopress</h2>

<p>(So I don&rsquo;t always google)</p>

<!-- more -->


<p>Notes copied from <a href="http://octopress.org/docs/blogging/">octopress docs</a></p>

<h3>New article</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["This is awesome article title!"]</span></code></pre></td></tr></table></div></figure>


<p>edit headers, add categories. Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># One category
</span><span class='line'>categories: Code
</span><span class='line'> 
</span><span class='line'># Multiple categories example 1
</span><span class='line'>categories: [Code, C++]
</span><span class='line'> 
</span><span class='line'># Multiple categories example 2
</span><span class='line'>categories:
</span><span class='line'>- Code
</span><span class='line'>- C++</span></code></pre></td></tr></table></div></figure>


<h3>New Pages</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[super-awesome]
</span><span class='line'># creates /source/super-awesome/index.markdown</span></code></pre></td></tr></table></div></figure>


<h3>Content</h3>

<p>Inserting <code>&lt;!-- more --&gt;</code> will prevent the post content below this mark from being displayed on the index page for the blog posts</p>

<h3>Generate, Preview, Publish</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake generate   # Generates posts and pages into the public directory
</span><span class='line'>bundle exec rake preview    # Watches, and mounts a webserver at http://localhost:4000
</span><span class='line'>bundle exec rake deploy     # Deploy to git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
