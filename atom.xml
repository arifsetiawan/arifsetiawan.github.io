<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Infinite | Squares]]></title>
  <link href="http://blog.infinitesquares.net/atom.xml" rel="self"/>
  <link href="http://blog.infinitesquares.net/"/>
  <updated>2015-08-16T06:02:03+07:00</updated>
  <id>http://blog.infinitesquares.net/</id>
  <author>
    <name><![CDATA[Nurul Arif Setiawan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customizing Open edX - Settings]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/25/customizing-open-edx-settings/"/>
    <updated>2015-07-25T20:24:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/25/customizing-open-edx-settings</id>
    <content type="html"><![CDATA[<p>After finished <a href="http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean/">OpenEdX installation</a> we need to modify some settings to change text, logo and activate some functionality: changing site name, using third party auth and many others. This is where things are a bit confusing because some documentations use different approach.</p>

<!-- more -->


<h2>Ways to update Open edX settings</h2>

<p>When reading several Open edX documentation, I found there are several methods to update Open edX settings:</p>

<ol>
<li>Update <code>server-vars.yml</code> at <code>/edx/app/edx_ansible/server-vars.yml</code></li>
<li>Update JSON config like <code>lms.env.json</code> or <code>cms.env.json</code> in <code>/edx/app/edxapp</code></li>
<li>Change <code>*.py</code> files in <code>/edx/app/edxapp/edx-platform/cms/envs</code> or <code>/edx/app/edxapp/edx-platform/lms/envs</code></li>
</ol>


<p>In tutorial about <a href="https://github.com/edx/edx-platform/wiki/Custom-Theming">custom theming</a>, it said we have to update <code>/edx/app/edx_ansible/server-vars.yml</code> then re run provisining script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /edx/bin/update edx-platform master</span></code></pre></td></tr></table></div></figure>


<p>In tutorial about <a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/mobile.html">setting up mobile application</a>, it said we need to update <code>edx/app/edxapp/lms.env.json</code> then restart the server with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /edx/bin/supervisorctl restart edxapp:</span></code></pre></td></tr></table></div></figure>


<p>In tutorial about <a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/configuration/enable_prerequisites.html">enabling course prerequisites</a>, we need to</p>

<blockquote><p>Set the value of MILESTONES_APP in the /cms/envs/common.py and /lms/envs/common.py files to True</p></blockquote>

<p>Then run database migration with (see <a href="https://github.com/edx/configuration/wiki/edX-Managing-the-Full-Stack">here</a> for how to manage Open edX full stack):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su edxapp -s /bin/bash
</span><span class='line'>cd ~
</span><span class='line'>source edxapp_env
</span><span class='line'>python /edx/app/edxapp/edx-platform/manage.py {lms/cms} syncdb --migrate --settings aws</span></code></pre></td></tr></table></div></figure>


<p>Now, do all the methods is related? And what is recommended approach?</p>

<h2>How Open edX read settings</h2>

<p>Open edX app (CMS and LMS) both has <code>envs</code> folders consisted to several <code>*.py</code> files. Those files are there to provide default sane settings in case you as the developer or admin did not provide customized settings. That is usually the case when we start exploring Open edX (either dev-stack or full-stack installation).</p>

<p>We only need to pay attention to two files if you deploy full-stack like me. If you working on dev-stack there is one setting file for that environment too.</p>

<ol>
<li>common.py &ndash; contains <em>default</em> settings, so that reasonable things happen; this way a default setting just for django does not need to appear in a playbook. Rule of thumb:  Never change these, unless you are doing new application/component development, and you are setting a new <em>reasonable default</em> for your component.</li>
<li>aws.py &ndash; this file basically executes after common.py, and inspects the environment, including the json files in (<code>lms.env.json</code> and others) to see if some default should be modified.</li>
<li>devstack.py &ndash; builds on top of aws.py, changing any settings as appropriate so that it may run on development servers, and locally.</li>
</ol>


<p>So now we have link between updating <code>envs/aws.py</code> (3rd method) and <code>*.json</code> (2nd method). In general changes to <code>*.json</code> will be read and used to override default setting from <code>common.py</code></p>

<p>In case you notice, in database migration command above we passed parameter <code>--settings aws</code> which indicate that we want to use <code>envs/aws.py</code> as our settings.</p>

<p>Now, how it all connected to the <code>server-vars.yml</code> (1st method)? it turns out that <code>*.json</code> files is generated from <code>server-vars.yml</code> during ansible playbook process.</p>

<p>When we run our ansible install commands</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /var/tmp/configuration/playbooks && sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"</span></code></pre></td></tr></table></div></figure>


<p>It will create a four JSON config files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lms.env.json
</span><span class='line'># lms.auth.json
</span><span class='line'># cms.env.json
</span><span class='line'># cms.auth.json</span></code></pre></td></tr></table></div></figure>


<p>Those json files is then read when <code>aws.py</code> is loaded.</p>

<h2>Working with settings</h2>

<p>For the full list of settings that you can override in <code>server-vars.yml</code> check <a href="https://github.com/edx/configuration/blob/master/playbooks/roles/edxapp/defaults/main.yml">here</a>. If you see <code>main.yml</code> file in previous link, there are more than 100 settings that you can tweak and set. We can pick one of the three methods above for development while we learn about Open edX and make sure those settings working as we expected.</p>

<p>For initial development purposes, we can start with creating our own settings file or modifying the one that used by default (<code>aws.py</code> in case of full stack install as we have) to experiment and determine what works. This is fast because we only need to restart the app after settings update.</p>

<p>Or we can start with modifying JSON file in <code>/edx/app/edxapp/*.json</code> and check in <code>aws.py</code> that the variable is read (if not, make sure that happens, and send in a Patch Request to contribute to Open edX). This is also fast because we only need to restart the app after settings update.</p>

<p>For long-term development purposes, it is better if we use <code>server-vars.yml</code> and to ensure that each variable is actually read in by <code>aws.py</code> (if not, make sure that happens, and send in a Patch Request to contribute to Open edX). <code>server-vars.yml</code> will then be read and used by the update command. Note that update command will run ansible playbook and it can take a while.</p>

<p>I am still learning Open edX and if you find any errors or have question or suggestion, please let me know.</p>

<p>Next, we will continue on customizing settings on our Open edX instance to enable third party auth and many others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove Malware in Wordpress Site]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/24/remove-malware-in-wordpress-site/"/>
    <updated>2015-07-24T15:48:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/24/remove-malware-in-wordpress-site</id>
    <content type="html"><![CDATA[<p>Beside develop web application with Javascript, I also work as an IT support. I had to manage (setup and server side maintenance) several <a href="https://wordpress.org/">Wordpress</a> based company sites running on IIS 6.1 on Windows Server 2008. Lately, our latest sites has been infected with malware. This is the notes on how I clean those sites.</p>

<!-- more -->


<p>To start, let me say that I am not a security expert. If you find any errors within this post, let me know. I would be very grateful for that.</p>

<p>I am following notes on How To Remove Malware From WordPress <a href="http://securepress.org/tutorial-how-to-remove-malware.php">here</a>. Note that, for now, I skipped on cleaning the database. We will revisit this if needed later.</p>

<h2>Wordpress malware scanner</h2>

<p>Using Wordfence Scan plugin, my colleague who manage our site content, give me the list of malicious files:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wp-content/themes/index.php
</span><span class='line'>wp-content/plugins/index.php
</span><span class='line'>wp-content/index.php
</span><span class='line'>wp-includes/theme.php</span></code></pre></td></tr></table></div></figure>


<p>The infected file will looks like this
<img src="https://cldup.com/Q49Ty7wz0q.jpg" title="Infected index.php" alt="Infected index.php" /></p>

<p>The attack seems like related to the theme. Perhaps there is vurnerability in the third party theme that we used.</p>

<h2>Cleanup steps</h2>

<h3>1. Download latest wordpress</h3>

<p>Go to <a href="https://wordpress.org/download/">Wordpress official site</a> and download the latest version. Extract the zip into a location. We will use it as reference when we clean our files and folder</p>

<h3>2. Remove most of the files</h3>

<p>Before deleting all of the Wordpress files, you might want to make a copy of it first.</p>

<p>Delete everything in the site folder except for the <code>wp-content</code> folder, and the <code>wp-config.php</code> file. Your wordpress folder sites will looks like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wp-content
</span><span class='line'>wp-config.php</span></code></pre></td></tr></table></div></figure>


<h3>3. Inspect wp-config.php</h3>

<p>Check <code>wp-config.php</code> for any malicious content (random string and such). Use latest wordpress downloaded before as reference. You can also change Unique keys and salt using this <a href="https://api.wordpress.org/secret-key/1.1/salt/">wordpress service</a>.</p>

<h3>4. Inspect wp-content folder</h3>

<p>By default, <code>wp-content</code> folder should have following structure</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plugins
</span><span class='line'>themes
</span><span class='line'>uploads
</span><span class='line'>index.php</span></code></pre></td></tr></table></div></figure>


<p>Since the content is managed by someone else, I proceed to delete all files except <code>uploads</code> folder. I will have to manually check that folder for malicious files (php files or anything that you may not have uploaded)</p>

<h3>5. Re upload wordpress and themes</h3>

<p>We can just copy and paste from latest wordpress files we downloaded earlier</p>

<p>And we are done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Open edX on Ubuntu 12.04 at Digital Ocean]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean/"/>
    <updated>2015-07-05T17:04:32+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/07/05/install-open-edx-on-ubuntu-12-dot-04-at-digital-ocean</id>
    <content type="html"><![CDATA[<p><a href="https://open.edx.org">Open edX</a> is the open source platform that powers <a href="https://www.edx.org/">edX</a> courses. It is freely available to the community. Institutions can host their own instances of Open edX and offer their own classes. Educators can extend the platform to build learning tools that precisely meet their needs. And developers can contribute new features to the Open edX platform. There are already many online course sites <a href="https://github.com/edx/edx-platform/wiki/Sites-powered-by-Open-edX">developed using Open edX</a>.</p>

<!-- more -->


<h3>Architecture</h3>

<p>Open edX consisting of several web applications, mostly written with Django Python. There are also mobile app for Android and iOS and analytics platform powered by Hadoop. It is quite complete and we can deploy it to have a complete online course experience. The architecture is explained <a href="https://open.edx.org/contributing-to-edx/architecture">here</a>.</p>

<p>Open edX has several components :</p>

<ul>
<li>LMS (App visible to students)</li>
<li>CMS (Studio. App visible to course creator)</li>
<li>cs_comment_service (Discussions)</li>
<li>MySQL (Database for user data and others)</li>
<li>Mongo (Database for course)</li>
<li>Mobile Apps (Android and iOS)</li>
<li>Analytics (Insight in edx.org)</li>
<li>Search with Elasticsearch</li>
<li>Background workers for various purposes (queued and distributed using Celery and RabbitMQ)</li>
</ul>


<h3>Installation</h3>

<p>To start with Open edX, we need to install it first. There are several options for Open edX platform installation:</p>

<ul>
<li>The Open edX Developer Stack, known as Devstack, is a Vagrant instance designed for local development.</li>
<li>Open edX Fullstack, known as Fullstack, has several deployment options:

<ul>
<li>Vagrant instance designed for deploying all edX services on a single server.</li>
<li>Open edX Fullstack on <a href="https://github.com/edx/configuration/wiki/edX-Ubuntu-12.04-64-bit-Installation">Ubuntu 12.04 64 bit</a></li>
</ul>
</li>
</ul>


<p>All installation methods mentioned above are meant for development purposes and not live production websites, since all of the components (apps and databases) are installed on single servers.</p>

<p>Since my laptop is not suitable for work with VirtualBox, I opted to install Open edX on Ubuntu server on cloud. For the cloud provider, I choose <a href="https://www.digitalocean.com/">Digital Ocean</a>. Digital Ocean provide SSD backed cloud server and its quite cheap. And this is my Open edX installation notes on Ubuntu 12.04 at Digital Ocean. Note that this is based on my experience as of today (2015-07-05).</p>

<h3>Installation notes on Digital Ocean</h3>

<h4>Create a server</h4>

<p>First, create Digital Ocean account if you don&rsquo;t have one. You need to add your credit card so you can create your first droplet (server).</p>

<p>I choose droplet with 4 CPUs and 8 GB RAM ($80/mo). I think 2 CPUs and 4 GB RAM ($40/mo) could work but maybe installation will take a bit longer. Open edX has lots of components. Choose Image Ubuntu 12.04.5 x64.</p>

<p>I recommend to Add SSH keys for your Ubuntu server. It is considered more secure than password based access, and you don&rsquo;t have to type password each time you access it. You can follow <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2">this tutorial</a> to create SSH key for your server.</p>

<p>This is my droplet summary</p>

<ul>
<li>Hostname : OpenEDX</li>
<li>Size : $80/mo</li>
<li>Region : Singapore 1</li>
<li>Image : 12.04.5 x64</li>
<li>Settings : none</li>
<li>SSH Keys : DigitalOcean</li>
</ul>


<p>When you&rsquo;re ready create your droplet. It will take about one minute.</p>

<h4>Add swap space</h4>

<p>Before we continue with Open edX installation. Lets create a swap space to add total amount of virtual memory allocated for our single server.</p>

<p>Again, folks and Digital Ocean has created <a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-12-04">a tutorial for creating swap space on Ubuntu server</a>. Follow those steps with one exception, I want to create a 8 GB swap space and I use this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo dd if=/dev/zero of=/swapfile bs=1G count=8</span></code></pre></td></tr></table></div></figure>


<p>The tutorial page use 1024 bytes blocksize and it takes too long to create 8 GB swap. Plus, I am having hard time calculate the correct count (I experienced error that all the disk content is used as swap. Which is not what you want)</p>

<h4>Install Open edX</h4>

<p>After the server ready, now we can install Open edX. The install script is already available on Open edX repository on Github. We need to update the server first.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo apt-get update -y
</span><span class='line'># sudo apt-get upgrade -y
</span><span class='line'># sudo apt-get install htop
</span><span class='line'># sudo reboot</span></code></pre></td></tr></table></div></figure>


<p>I install htop so I can monitor what happens during installation. It takes a while and sometimes I wonder what is going on. Is it hang or doing something (compiling, downloading, etc)</p>

<p>Then run this command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh -O - | bash</span></code></pre></td></tr></table></div></figure>


<p>It will run ansible commands to install all required dependencies and services for running Open edX on single server.</p>

<p>While we wait, lets read some Open edX documentation</p>

<ul>
<li><a href="https://github.com/edx/edx-platform/wiki">https://github.com/edx/edx-platform/wiki</a></li>
<li><a href="https://github.com/edx/configuration/wiki">https://github.com/edx/configuration/wiki</a></li>
<li><a href="http://edx-developer-guide.readthedocs.org/">http://edx-developer-guide.readthedocs.org/</a></li>
<li><a href="http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/">http://edx.readthedocs.org/projects/edx-installing-configuring-and-running/en/latest/</a></li>
<li><a href="http://edx.readthedocs.org/projects/xblock/en/latest/">http://edx.readthedocs.org/projects/xblock/en/latest/</a></li>
<li><a href="http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/named-release-birch/">http://edx.readthedocs.org/projects/open-edx-building-and-running-a-course/en/named-release-birch/</a></li>
</ul>


<p>Then I experiences series of errors:</p>

<h5>Error 1</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error
</span><span class='line'>  Downloading dm.xmlsec.binding-1.3.2.tar.gz (119kB)
</span><span class='line'>    Error: cannot get XMLSec1 pre-processor and compiler flags; do you have the `libxmlsec1` development package installed?
</span><span class='line'>    Complete output from command python setup.py egg_info:
</span><span class='line'>    Error: cannot get XMLSec1 pre-processor and compiler flags; do you have the `libxmlsec1` development package installed?
</span><span class='line'>
</span><span class='line'>    ----------------------------------------
</span><span class='line'>    Command "python setup.py egg_info" failed with error code 1 in /tmp/pip-build-RMvh3g/dm.xmlsec.binding
</span><span class='line'>
</span><span class='line'>FATAL: all hosts have already failed -- aborting</span></code></pre></td></tr></table></div></figure>


<p>The install script is missing one package: <code>libxmlsec1-dev</code>. Let&rsquo;s install it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo apt-get install libxmlsec1-dev</span></code></pre></td></tr></table></div></figure>


<p>Redo the process by calling</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh -O - | bash</span></code></pre></td></tr></table></div></figure>


<p>Continue reading.</p>

<h5>Error 2</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error
</span><span class='line'>    swig -python -I/usr/include/python2.7 -I/usr/include/x86_64-linux-gnu -I/usr/include -I/usr/include/openssl -includeall -modern -o SWIG/_m2crypto_wrap.c SWIG/_m2crypto.i
</span><span class='line'>
</span><span class='line'>    unable to execute swig: No such file or directory
</span><span class='line'>
</span><span class='line'>    error: command 'swig' failed with exit status 1</span></code></pre></td></tr></table></div></figure>


<p>The install script is again missing one package: <code>swig</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sudo apt-get install swig</span></code></pre></td></tr></table></div></figure>


<p>Redo the process</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget https://raw.githubusercontent.com/edx/configuration/master/util/install/sandbox.sh -O - | bash</span></code></pre></td></tr></table></div></figure>


<p>And continue reading.</p>

<h5>Error 3</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>- Migration 'student:0031_drop_student_anonymoususerid_temp_archive' is marked for no-dry-run.
</span><span class='line'> &gt; student:0032_add_field_UserProfile_country_add_field_UserProfile_city
</span><span class='line'> &gt; student:0032_auto__add_loginfailures
</span><span class='line'> &gt; student:0033_auto__add_passwordhistory
</span><span class='line'> &gt; student:0034_auto__add_courseaccessrole
</span><span class='line'> &gt; student:0035_access_roles
</span><span class='line'> - Migration 'student:0035_access_roles' is marked for no-dry-run.
</span><span class='line'> ! Error found during real run of migration! Aborting.
</span><span class='line'>
</span><span class='line'> ! Since you have a database that does not support running
</span><span class='line'> ! schema-altering statements in transactions, we have had
</span><span class='line'> ! to leave it in an interim state between migrations.
</span><span class='line'>
</span><span class='line'>! You *might* be able to recover with:   (migration cannot be dry-run; cannot discover commands)
</span><span class='line'> ! The South developers regret this has happened, and would
</span><span class='line'> ! like to gently persuade you to consider a slightly
</span><span class='line'> ! easier-to-deal-with DBMS (one that supports DDL transactions)
</span><span class='line'> ! NOTE: The error which caused the migration to fail is further up.
</span><span class='line'>Error in migration: student:0035_access_roles
</span><span class='line'>changed: [localhost] =&gt; (item=cms)
</span><span class='line'>
</span><span class='line'>FATAL: all hosts have already failed -- aborting</span></code></pre></td></tr></table></div></figure>


<p>This is error during database migration. I just redo the whole process.</p>

<p>You might wonder is it safe to redo the install process over and over again. It is safe because Ansible is designed to be idempotent which means that you can apply and re-apply it an infinite number of times without changing the result. I just assume the Open edX authors utilize idempotency in their Ansible playbooks.</p>

<h5>Error 4</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error
</span><span class='line'>failed: [localhost] =&gt; {"failed": true, "item": ""}
</span><span class='line'>msg: Failed to validate the SSL certificate for download.elasticsearch.org:443. Use validate_certs=no or make sure your managed systems have a valid CA certificate installed. Paths checked for this platform: /etc/ssl/certs, /etc/pki/ca-trust/extracted/pem, /etc/pki/tls/certs, /usr/share/ca-certificates/cacert.org, /etc/ansible
</span><span class='line'>
</span><span class='line'>FATAL: all hosts have already failed -- aborting</span></code></pre></td></tr></table></div></figure>


<p>It means we cannot proceed to download ElasticSearch installer because our system installed certificates do not recognize SSL used in download.elasticsearch.org. One way to fix this, as suggested by the error message, add <code>validate_certs=no</code> somewhere when we install ElasticSearch. Open playbook for ElasticSearch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nano /var/tmp/configuration/playbooks/roles/elasticsearch/tasks/main.yml</span></code></pre></td></tr></table></div></figure>


<p>At line 37, right after <code>force=no</code>, and press space to insert new line.
Type <code>validate_certs=no</code> in a new line.</p>

<p>Then redo install using following script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd /var/tmp/configuration/playbooks && sudo ansible-playbook -c local ./edx_sandbox.yml -i "localhost,"</span></code></pre></td></tr></table></div></figure>


<p>Note that I redo Ansible process by executing local script instead of fetching again from github because we don&rsquo;t want to lose our changes.</p>

<h4>Successful install</h4>

<p>After a while, finally there are no more errors on the installation process, and I have my Open edX running.</p>

<p>To make our life easier, I have <a href="https://github.com/arifsetiawan/configuration">forked edx configuration repo</a> and you can execute it on Ubuntu 12.04 machine with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># wget https://cdn.rawgit.com/arifsetiawan/configuration/master/util/install/sandbox.sh -O - | bash</span></code></pre></td></tr></table></div></figure>


<p>I am still learning Open edX and if you find any errors or have question or suggestion, please let me know.</p>

<p>Next, we will continue on exploring how settings work on our Open edX instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OAuth2 Flows]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/06/01/oauth2-flows/"/>
    <updated>2015-06-01T21:59:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/06/01/oauth2-flows</id>
    <content type="html"><![CDATA[<p>During my work to refactor one of my Node.js based app, I tried to dug deeper into OAuth2 authorization flows. There are 4 authorization flows. See here <a href="http://labs.hybris.com/2012/06/01/oauth2-authorization-code-flow/">http://labs.hybris.com/2012/06/01/oauth2-authorization-code-flow/</a>:</p>

<!-- more -->


<ul>
<li>Authorization Code Flow, aka Server-Side Flow or the ‘typical’ Oauth2 flow: this flow includes sending the client user via redirect to the provider’s login and authorization page, then will redirect back to your web application and pass a authorization code in the URL parameters.</li>
<li>Implicit Flow, aka as Client-Side Flow: this flow is pretty simple and is suited for browser-based client-side web applications. This means: JavaScript. You send the user via redirect to the provider’s web site, she logs in and authorizes your app, then the provider redirects back to your web application.</li>
<li>Resource Owner Password Flow: this flow is great for native mobile applications that you can trust. This flow includes sending the user’s username and password to the token endpoint in exchange for an access token.</li>
<li>Client Credentials Flow: this flow identifies the client and give the client itself access to resources it owns and does not give the client access to users’ data.</li>
</ul>


<p>Since my app is written with Node.js, first move is to see if there is Node.js modules that support all flows. Fortunately, <a href="http://passportjs.org/">passport</a> support all of it. Here are some links for each flow (with the exception of the last, since it just about client data):</p>

<ul>
<li>Authorization Code Flow. <a href="https://rwlive.wordpress.com/2014/05/26/oauth2-authorization-grant-flow-using-oauth2orize-express-4-and-mongojs/">https://rwlive.wordpress.com/2014/05/26/oauth2-authorization-grant-flow-using-oauth2orize-express-4-and-mongojs/</a></li>
<li>Implicit Flow. <a href="https://rwlive.wordpress.com/2014/06/11/oauth2-implicit-flow-using-oauth2orize-express-4-and-mongojs/">https://rwlive.wordpress.com/2014/06/11/oauth2-implicit-flow-using-oauth2orize-express-4-and-mongojs/</a></li>
<li>Resource Owner Password Flow. <a href="https://rwlive.wordpress.com/2014/06/24/oauth2-resource-owner-password-flow-using-oauth2orize-express-4-and-mongojs/">https://rwlive.wordpress.com/2014/06/24/oauth2-resource-owner-password-flow-using-oauth2orize-express-4-and-mongojs/</a></li>
</ul>


<p>For your application, if you start with mobile app developed internally, start with Resource Owner Password Flow. If you start allowing third party applications to integrate with your API, implement Authorization Code Flow. Finally, when you develop a javascript client library for your API, deploy Implicit Flow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Gulp]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/04/01/getting-started-with-gulp/"/>
    <updated>2015-04-01T10:08:17+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/04/01/getting-started-with-gulp</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/gulpjs/gulp">Gulp</a> is a build system implemented using stream. You can use gulp to hinting and linting scripts, concatenate and minify them, automate testing and many others. I have been wanted to use Gulp in my Nodejs project for a while (I have tried Grunt once, but that not work well for me). This is my working with Gulp notes.</p>

<!-- more -->


<h2>Installation</h2>

<p>To start, install Gulp globally</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g gulp</span></code></pre></td></tr></table></div></figure>


<p>Next, install gulp as development module in your Nodejs project</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install gulp --save-dev</span></code></pre></td></tr></table></div></figure>


<p>Make <code>gulpfile.js</code> in your root project folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// gulp tasks here</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run <code>gulp</code> from command line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">gulp</span>
</span><span class='line'><span class="p">[</span><span class="mi">10</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">23</span><span class="p">]</span> <span class="nx">Using</span> <span class="nx">gulpfile</span> <span class="o">~</span><span class="err">\</span><span class="nx">app</span><span class="err">\</span><span class="nx">gulpfile</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="p">[</span><span class="mi">10</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">23</span><span class="p">]</span> <span class="nx">Starting</span> <span class="s1">&#39;default&#39;</span><span class="p">...</span>
</span><span class='line'><span class="p">[</span><span class="mi">10</span><span class="o">:</span><span class="mi">18</span><span class="o">:</span><span class="mi">23</span><span class="p">]</span> <span class="nx">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="nx">after</span> <span class="mi">72</span> <span class="err">µ</span><span class="nx">s</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Development style</h2>

<p>Now that we have Gulp ready, we can start looking for flow that we want to use. I think we should customized our gulp workflow to our developments style. There are many tutorials available on how you can setup your Gulp flow. For example <a href="http://www.frontendjournal.com/how-to-build-an-asset-pipeline-with-gulpjs-for-any-webapp/">here</a> and <a href="http://alistapart.com/blog/post/getting-started-with-gulp">here</a></p>

<p>My stack now is Nodejs for backend, with MongoDB on database and standard HTML, CSS, Javascript trio on the front end. For Nodejs I use <a href="http://expressjs.com/">Expressjs</a> and <a href="http://paularmstrong.github.io/swig">Swig</a> rendering engine. So naturally I look for Gulp flow that suitable for my development approach.</p>

<p>For example, I usually start with default base template for other swig file to inherit. This will contains all commons Javascript and CSS files.</p>

<figure class='code'><figcaption><span>Swig base template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/font-awesome.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block styles %}{% endblock %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block content %}{% endblock %}
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/modernizr.custom.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/bootbox.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block scripts %}{% endblock %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I want to make login page, I would do</p>

<figure class='code'><figcaption><span>Login page </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{% extends &quot;../template/centerbox.swig&quot; %}
</span><span class='line'>
</span><span class='line'>{% block styles %}
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/login.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/other.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'>
</span><span class='line'>{% block content %}
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content-area&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Login form --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{% endblock %}
</span><span class='line'>
</span><span class='line'>{% block scripts %}
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/login.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/other.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>{% endblock %}
</span></code></pre></td></tr></table></div></figure>


<p>My aim to to group assets in different swig file into different concatenated, minified and uglified scripts. If login page is rendered, it would be</p>

<figure class='code'><figcaption><span>Swig base template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/base.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/login.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content-area&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Login form --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/base.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/login.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think this approach is better than combining all files into one big min.js or min.css file. It provide separate file for asset that might be changes frequently. With that in mind I start looking available Gulp plugin for such task (someone must have thought that too!).</p>

<h2>Gulp tasks</h2>

<p>I found <a href="https://github.com/jonkemp/gulp-useref">gulp-useref</a> which do exactly as I wanted. and I also add <a href="https://github.com/sindresorhus/gulp-rev">gulp-rev</a> to add hash of content into filename.</p>

<p>So head to your console and install the followings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">useref</span> <span class="nx">gulp</span><span class="o">-</span><span class="k">if</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">rev</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">uglify</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">minify</span><span class="o">-</span><span class="nx">css</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">rev</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">rev</span><span class="o">-</span><span class="nx">replace</span> <span class="nx">gulp</span><span class="o">-</span><span class="nx">sequence</span> <span class="nx">del</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then update your swig files</p>

<figure class='code'><figcaption><span>Swig base template updated with useref syntax </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:css /css/base.min.css --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/font-awesome.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/bootstrap.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block styles %}{% endblock %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block content %}{% endblock %}
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- build:js /css/base.min.js --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/modernizr.custom.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/jquery-1.9.1.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/bootbox.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'>    {% block scripts %}{% endblock %}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do the same to the login page swig file.</p>

<p>Now, for my gulpfile.js</p>

<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">useref</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-useref&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gulpif</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-if&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minifyCss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rev</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-rev&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">revReplace</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-rev-replace&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">del</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;del&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gulpSequence</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-sequence&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 1</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;swig&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">assets</span> <span class="o">=</span> <span class="nx">useref</span><span class="p">.</span><span class="nx">assets</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">searchPath</span><span class="o">:</span> <span class="s1">&#39;app/public&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;app/views/**/*.swig&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">assets</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulpif</span><span class="p">(</span><span class="s1">&#39;*.js&#39;</span><span class="p">,</span> <span class="nx">uglify</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulpif</span><span class="p">(</span><span class="s1">&#39;*.css&#39;</span><span class="p">,</span> <span class="nx">minifyCss</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">rev</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">assets</span><span class="p">.</span><span class="nx">restore</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">useref</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">revReplace</span><span class="p">({</span><span class="nx">replaceInExtensions</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;.swig&#39;</span><span class="p">]}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist/views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;move:font&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./app/public/fonts/*&#39;</span><span class="p">],</span> <span class="p">{</span> <span class="nx">base</span><span class="o">:</span> <span class="s1">&#39;./app/public/&#39;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 3</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;move:css&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./dist/views/css/*&#39;</span><span class="p">],</span> <span class="p">{</span> <span class="nx">base</span><span class="o">:</span> <span class="s1">&#39;./dist/views/&#39;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;move:js&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">([</span><span class="s1">&#39;./dist/views/js/*&#39;</span><span class="p">],</span> <span class="p">{</span> <span class="nx">base</span><span class="o">:</span> <span class="s1">&#39;./dist/views/&#39;</span> <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;dist&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 4</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;delete:cssjs&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">del</span><span class="p">([</span><span class="s1">&#39;dist/views/css/**&#39;</span><span class="p">,</span> <span class="s1">&#39;dist/views/js/**&#39;</span><span class="p">],</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 5</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="nx">gulpSequence</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span><span class="s1">&#39;swig&#39;</span><span class="p">,</span><span class="s1">&#39;move:font&#39;</span><span class="p">,</span><span class="s1">&#39;move:css&#39;</span><span class="p">,</span><span class="s1">&#39;move:js&#39;</span><span class="p">,</span><span class="s1">&#39;delete:cssjs&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 6</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">del</span><span class="p">([</span><span class="s1">&#39;dist/views/**&#39;</span><span class="p">,</span><span class="s1">&#39;dist/js/**&#39;</span><span class="p">,</span><span class="s1">&#39;dist/css/**&#39;</span><span class="p">,</span><span class="s1">&#39;dist/fonts/**&#39;</span><span class="p">],</span> <span class="nx">cb</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the commentary</p>

<ol>
<li>This is where <code>useref</code> will scans all swig files, collect js and css inside useref tags, concat, minify, copy to destination then writing it back into swig files. It also use <code>gulp-rev</code> to add checksum.</li>
<li>Copy font files into destination too so we have all assets in one place</li>
<li>Somehow, minified js and css are copied into the same destination as output swig files. Move them into other location.</li>
<li>Delete moved js and css files</li>
<li>Default task. I use <code>gulp-sequence</code> because I found that moving and deleting runs in parallel and that can mess the whole things.</li>
<li>Clean destination folder before updating the content.</li>
</ol>


<p>If all running correctly, you will have</p>

<figure class='code'><figcaption><span>Swig base template </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/base-d810cb7f.min.css&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/css/login-632b05b7.min.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content-area&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- Login form --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/base-784b8098.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/js/login-e410da1c.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Update on Express</h2>

<p>You also need to update express to use your update swig files. My preference is to use config file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span><span class="p">(</span><span class="s1">&#39;swig&#39;</span><span class="p">,</span> <span class="nx">swig</span><span class="p">.</span><span class="nx">renderFile</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">useDist</span> <span class="o">?</span> <span class="s1">&#39;dist/views&#39;</span><span class="o">:</span> <span class="s1">&#39;app/views&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;swig&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also because the asset is now has revisions, you don&rsquo;t have to worry if you set long time for it to expire on browser assets (this will reduce request to server). Here I set to 1 year.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">serveStatic</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;dist&#39;</span><span class="p">),</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setHeaders</span><span class="o">:</span> <span class="kd">function</span> <span class="nx">setDistCacheControl</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">,</span> <span class="s1">&#39;public, max-age=&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="mi">365</span><span class="o">*</span><span class="mi">86400</span><span class="p">))</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s2">&quot;Expires&quot;</span><span class="p">,</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;y&#39;</span><span class="p">).</span><span class="nx">toDate</span><span class="p">().</span><span class="nx">toUTCString</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. I hope this notes is useful for you. Let me know if you have any comment or feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx for Node.js]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/01/22/nginx-for-node-dot-js/"/>
    <updated>2015-01-22T11:49:45+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/01/22/nginx-for-node-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://nginx.org/">Nginx</a> is a high performance web server. Some said it is better than Apache. Nginx can be used as reverse proxy for Node.js server application. And also as static file server since it&rsquo;s very efficient. If you are have a VPS or VM running, you can use Nginx as front for more than one Node.js app.</p>

<p>First, you have to install Nginx first. My standard script for installing development server is available <a href="http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup/">here</a>. Once you have nginx setup, when you access your server on port 80, you will see nginx welcoming screen.</p>

<!-- more -->


<p>Here, I assume you already have a Nodejs app running. Use forever or pm2 for production server.</p>

<p>Remove the default site file. You can choose to keep this, just make sure the server_name is different.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo rm /etc/nginx/sites-available/default
</span><span class='line'>sudo rm /etc/nginx/sites-enabled/default</span></code></pre></td></tr></table></div></figure>


<p>Create new file for your site</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nano /etc/nginx/sites-available/mysite</span></code></pre></td></tr></table></div></figure>


<p>The content</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream myNodeApp{
</span><span class='line'>    server localhost:4000;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server{
</span><span class='line'>    server_name localhost;
</span><span class='line'>
</span><span class='line'>    access_log /home/server/logs/access.log;
</span><span class='line'>    error_log /home/server/logs/access.log;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        proxy_set_header X-Real-IP $remote_addr;
</span><span class='line'>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>        proxy_set_header Host $http_host;
</span><span class='line'>        proxy_set_header X-NginX-Proxy true;
</span><span class='line'>
</span><span class='line'>        proxy_pass http://myNodeApp;
</span><span class='line'>        proxy_redirect off;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Save and close the nano text editor. Make sure you have created logs folder as shown above.</p>

<p>Then create a symbolic link from <code>sites-available</code> to <code>sites-enabled</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln –s /etc/nginx/sites-available/mysite /etc/nginx/sites-enabled/mysite</span></code></pre></td></tr></table></div></figure>


<p>Check your site file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo nginx -t</span></code></pre></td></tr></table></div></figure>


<p>If there are error, nginx will tell you.</p>

<p>Restart nginx</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nginx restart</span></code></pre></td></tr></table></div></figure>


<p>Access your server on port 80 using your favorite browser. There is your nodejs app.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using SSH on Azure Linux VM]]></title>
    <link href="http://blog.infinitesquares.net/blog/2015/01/20/using-ssh-on-azure-linux-vm/"/>
    <updated>2015-01-20T09:49:13+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2015/01/20/using-ssh-on-azure-linux-vm</id>
    <content type="html"><![CDATA[<p>Typing password is a time wasting process. It is recommended to use SSH with public private keys to access Linux VM box. To do that in Azure, first you need to create a key pair using following command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout MyAzure.key -out MyAzure.pem</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Then you can :</p>

<ul>
<li>Proceed to create VM in using Azure portal (recommended for beginners and when you don&rsquo;t need some sort of automation). You need to upload .pem file.</li>
<li>Use azure cli to create your VM from command line (advanced user). Details on this available in my <a href="https://gist.github.com/arifsetiawan/afcf9adeb9922066f81f">gist here</a></li>
</ul>


<p>To use SSH key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -i C:\\FOLDER_NAME\\MyAzure.key USER@DOMAIN.cloudapp.net</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Issues on Using Iisnode on Windows 7]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7/"/>
    <updated>2014-11-13T07:16:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/11/13/issues-on-using-iisnode-on-windows-7</id>
    <content type="html"><![CDATA[<p><strong> Update </strong></p>

<p>I found the issue with the Azure website. Sailsjs is actually working well. The issue is that I used Azure free tier and free tier is going idle (IIS app pool timeout) after some time if not used. This caused some errors when I tried to access it from browser (that&rsquo;s when the app started again). I tried to use <a href="https://uptimerobot.com/">uptimerobot</a> to check the site every 5 minutes so it will not go idle. I still found the website is stopped this morning.</p>

<p><strong> end of update </strong></p>

<p>I started to use <a href="http://sailsjs.org/">sailsjs</a> in my latest project. When I deployed it to Azure Web Sites, the web is not working. Sometimes I can access it, but most of the time I just can&rsquo;t. So I went to install IIS and iisnode on my Windows 7 machine to test the sailsjs on IIS deployment on local dev machine. Maybe I can figure out what went wrong. But what I found is series on errors when trying to run simple iisnode example.</p>

<!-- more -->


<p>So the example can be accessed on <a href="http://localhost/node">http://localhost/node</a></p>

<h3>Error #1. 500.19 with Error Code 0x80070021</h3>

<p>This happened whn I tried to click on of the example on <a href="http://localhost/node">http://localhost/node</a> page</p>

<p>Description</p>

<blockquote><p>Config Error  This configuration section cannot be used at this path. This happens when the section is locked at a parent level. Locking is either by default (overrideModeDefault=&ldquo;Deny&rdquo;), or set explicitly by a location tag with overrideMode=&ldquo;Deny&rdquo; or the legacy allowOverride=&ldquo;false&rdquo;.</p></blockquote>

<p>I spent hours trying to resolve this error. This <a href="https://github.com/tjanczuk/iisnode/issues/52">issue</a> suggested to <strong>Set the Handler Mappings to Read/Write</strong>. I checked and its set correctly but still no luck.</p>

<p>Then I fount this <a href="http://www.codeproject.com/Questions/390725/HTTP-Error-Internal-Server-Error">question</a> which linked to this <a href="http://www.donnfelker.com/iis-7-this-configuration-section-cannot-be-used-at-this-path/">blog</a>.</p>

<p>So following the answer :</p>

<ol>
<li>Open the applicationHost.config file, located here: %windir%\system32\inetsrv\config\applicationHost.config</li>
<li>Edit the &ldquo;handlers&rdquo; section.</li>
<li>Change this line:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;section name=”handlers” overrideModeDefault=”Deny” /&gt;
</span><span class='line'>  To:
</span><span class='line'>  &lt;section name=”handlers” overrideModeDefault=”Allow” /&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now its working. I can click one of the example. Lets go to <a href="http://localhost/node/helloworld/readme.htm">helloworld</a></p>

<h3>Error #2. Nodejs path issue</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a></p>

<p>Description</p>

<blockquote><p>The iisnode module is unable to start the node.exe process. Make sure the node.exe executable is available at the location specified in the system.webServer/iisnode/@nodeProcessCommandLine element of web.config. By default node.exe is expected in one of the directories listed in the PATH environment variable.</p></blockquote>

<p>This one is easy, I use nodist which put node.exe on non default PATH. Add this line to <code>web.config</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;iisnode
</span><span class='line'>  nodeProcessCommandLine="&quot;C:\Users\ArifSetiawan\Repository\nodist\bin\node.exe&quot;" 
</span><span class='line'>/&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Error #3. 500.1000 with Error Code 0x00000005</h3>

<p>This happened when I tried to run Node.js app <a href="http://localhost/node/helloworld/hello.js">http://localhost/node/helloworld/hello.js</a>. New error.</p>

<p>I spent another hours on this one. I tried to install ASP, ASP.NET and .NET Extensibility Features on IIS. Then running <code>aspnet_regiis.exe -i</code>. But still have the error!</p>

<p>Any thoughts?</p>

<p>As for me, I will just use Linux box. It&rsquo;s a shame because Azure Website scalability is a big plus!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add User to MongoDB]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/11/11/add-user-to-mongodb/"/>
    <updated>2014-11-11T09:41:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/11/11/add-user-to-mongodb</id>
    <content type="html"><![CDATA[<p>MongoDB is easy enough to use that you don&rsquo;t even have to think about adding user when start using it. This could lead to a problem down the road when you are need to open your database access to public internet. And also the provided free version do not support SSL!. But that is another issue.</p>

<p>For now, lets take note on how we can start adding user (and password) to protect our database access.</p>

<!-- more -->


<h3>Add admin</h3>

<p>First you want to start add admin user which can manage other users</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo</span></code></pre></td></tr></table></div></figure>


<p>then in Mongo shell</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use admin</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; db.createUser(
</span><span class='line'>  {
</span><span class='line'>    user: "admin",
</span><span class='line'>    pwd: "adminpass",
</span><span class='line'>    roles:
</span><span class='line'>    [
</span><span class='line'>      {
</span><span class='line'>        role: "userAdminAnyDatabase",
</span><span class='line'>        db: "admin"
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Then exit shell by <code>Ctrl+C</code> or type <code>exit</code></p>

<h3>Enable auth on MongoD</h3>

<p>edit the mongo conf file with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo nano /etc/mongod.conf</span></code></pre></td></tr></table></div></figure>


<p>Uncomment this line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>auth=true</span></code></pre></td></tr></table></div></figure>


<p>If you want to access from other machine change the line</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind_ip=127.0.0.1</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bind_ip=0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p>More protection is necessary in production servers. I will explore this later.</p>

<p>Then restart mongod</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service mongod restart</span></code></pre></td></tr></table></div></figure>


<h3>Add user to the database</h3>

<p>Open Mongo shell</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use admin
</span><span class='line'>&gt; db.auth("admin","pwd:"adminpass")</span></code></pre></td></tr></table></div></figure>


<p>Add new database and its user</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use newdb
</span><span class='line'>&gt; db.createUser(
</span><span class='line'>  {
</span><span class='line'>    user: "user",
</span><span class='line'>    pwd: "pass",
</span><span class='line'>    roles:
</span><span class='line'>    [
</span><span class='line'>      {
</span><span class='line'>        role: "dbOwner",
</span><span class='line'>        db: "newdb"
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>)
</span><span class='line'>&gt; db.auth("user","pass")
</span><span class='line'>&gt; show collections</span></code></pre></td></tr></table></div></figure>


<p>There you have it. Now your MongoDB is user-password protected. Its a small step but necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly Node.js Error Message]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message/"/>
    <updated>2014-10-01T11:21:23+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/10/01/friendly-nodejs-error-message</id>
    <content type="html"><![CDATA[<p>While working with Node.js, I used <code>fs</code> module often. One function that I used frequently is <code>fs.exists()</code> to check if the file is there before doing any processing. Today, I read through Node.js <code>fs</code> documentation and found the following :</p>

<!-- more -->


<blockquote><p>fs.exists() is an anachronism and exists only for historical reasons. There should almost never be a reason to use it in your own code.</p>

<p>In particular, checking if a file exists before opening it is an anti-pattern that leaves you vulnerable to race conditions: another process may remove the file between the calls to fs.exists() and fs.open(). Just open the file and handle the error when it&rsquo;s not there.</p></blockquote>

<p>It make sense. Suppose we want to get file stat using <code>fs.stat()</code>, just call the function and see the error code. If the file is not exists, then you will have this error :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="p">[</span><span class="nb">Error</span><span class="o">:</span> <span class="nx">ENOENT</span><span class="p">,</span> <span class="nx">stat</span> <span class="s1">&#39;c:\Users\ArifSetiawan\Repository\CymbRef\cmd\somefile&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">errno</span><span class="o">:</span> <span class="mi">34</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">code</span><span class="o">:</span> <span class="s1">&#39;ENOENT&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;c:\\Users\\ArifSetiawan\\Repository\\CymbRef\\cmd\\somefile&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Node.js use POSIX codes to denote errors and its <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/errno.h.html">a long list</a>. How do you translate the error <strong>ENOENT</strong> into friendly error message. Do you even know that <strong>ENOENT</strong> means <code>No such file or directory</code>?</p>

<p>Lucky for us, Rod Vagg (<a href="https://github.com/rvagg">rvagg</a>) has created a node modules which give description for all kinds of errno in Node.js named <a href="https://github.com/rvagg/node-errno">errno</a>. Using example from the readme :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">errno</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;errno&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;Error: &#39;</span>
</span><span class='line'>    <span class="c1">// if it&#39;s a libuv error then get the description from errno</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">].</span><span class="nx">description</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if it&#39;s a `fs` error then it&#39;ll have a &#39;path&#39; property</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39; [&#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">stat</span><span class="p">(</span><span class="s1">&#39;filenotexists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can have human friendly readable error</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error: no such file or directory [c:\Users\ArifSetiawan\Repository\CymbRef\cmd\filenotexists]</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Makefile .PHONY]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony/"/>
    <updated>2014-09-30T10:29:21+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/30/makefile-phony</id>
    <content type="html"><![CDATA[<p>Currently I am working on a Node.js module to abstract cloud storage interaction with filesystem idioms. My partner in the project suggested to use Makefile for running test scripts. So I created following Makefile</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TESTS = test/*.js
</span><span class='line'>REPORTER = dot
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  @NODE_ENV=test ./node_modules/.bin/mocha \
</span><span class='line'>    --require should \
</span><span class='line'>    --reporter $(REPORTER) \
</span><span class='line'>    --timeout 5000 \
</span><span class='line'>    $(TESTS)</span></code></pre></td></tr></table></div></figure>


<p>When I run <code>make test</code> I always got following response</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ make test
</span><span class='line'>make: `test' is up to date.</span></code></pre></td></tr></table></div></figure>


<p>So, what is the problem?</p>

<p>Apparently I have a folder named <code>test</code> (which contains all of test scripts). When I run <code>make test</code>, then Make command will be executed againts the <code>test</code> folder.</p>

<p>Enter .PHONY</p>

<p>If you have same command name and file/folder name on your project and you want to execute the command in Makefile, then you have to add .PHONY to tell the compiler to execute the command Makefile. The special rule .PHONY tells Make which targets are not files.</p>

<p>So update the Makefile to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TESTS = test/*.js
</span><span class='line'>REPORTER = dot
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  @NODE_ENV=test ./node_modules/.bin/mocha \
</span><span class='line'>    --require should \
</span><span class='line'>    --reporter $(REPORTER) \
</span><span class='line'>    --timeout 5000 \
</span><span class='line'>    $(TESTS)
</span><span class='line'>
</span><span class='line'>.PHONY: test</span></code></pre></td></tr></table></div></figure>


<p>And the tests are running</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resumable Download and Upload With Qt]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/21/resumable-download-and-upload-with-qt/"/>
    <updated>2014-09-21T21:37:51+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/21/resumable-download-and-upload-with-qt</id>
    <content type="html"><![CDATA[<p><a href="http://qt-project.org/">Qt</a> is one of my favorite C++ framework. It provides great IDE, GUI components that easy to use and its signal slot mechanism is powerful. I did a lot of work with Qt a while back and wrote some Qt apps for Symbian and Meego (It&rsquo;s unfortunate that both platform is dead now). I can say that coding with Qt is fun.</p>

<!-- more -->


<p>One of the project that I did required a resumable download and upload. How we can have a a resumable download and upload client?</p>

<h2>Resumable download</h2>

<p>The code is available <a href="https://github.com/arifsetiawan/qt-download-plugin">here</a></p>

<p>The key part in resumable download is HTTP header <a href="http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#range-request-header"><code>Range</code></a>. Range header allow us to request only part of an entity, starting from specified bytes. Example of Range header.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Range: bytes=500-999</span></code></pre></td></tr></table></div></figure>


<p>When we received bytes of the file, we store those bytes into a file. If connection stopped and we want to resume, we simply get the size of downloaded part and continue from there by specifying the start bytes. See <a href="https://github.com/arifsetiawan/qt-download-plugin/blob/master/downloadplugin.cpp#L184-L187">here</a> for the relevant part of the code.</p>

<h2>Resumable upload</h2>

<p>The code is available <a href="https://github.com/arifsetiawan/qt-upload-plugin">here</a></p>

<p>To enable resumable upload we have to use new approach on the server side too. Simply user standard HTTP POST with <code>Content-Type: multipart/form-data</code> just doesn&rsquo;t cut it. One protocol that specify how we can create reliable and resumable file upload is <a href="http://tus.io/">tus</a>. The tl;dr is</p>

<ul>
<li>POST to create new file with file size included in header, server will create the file id and sent it back</li>
<li>HEAD to get current file size, server will return <code>offset</code> value on response header</li>
<li>PATCH to send file data start from <code>offset</code> value. Client will upload file in several chunks.</li>
</ul>


<h2>Both in one application</h2>

<p>You can see both download and upload plugin integrated in one sample application <a href="https://github.com/arifsetiawan/qt-plugin-host">here</a>. Note that to test resumable upload with tus, you should prepare you own tus server. You can choose several tus server implementation from <a href="http://tus.io/implementations.html">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatten Node_modules]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules/"/>
    <updated>2014-09-21T05:45:42+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/21/flatten-node-modules</id>
    <content type="html"><![CDATA[<p>If you worked with Node.js, you might start notice youd node_modules started to simply nested into the abyss and the path is getting longer and longer. Consider this :</p>

<p><code>/C/Users/ArifSetiawan/Repository/Katch/katch/node_modules/sails/node_modules/grunt-contrib-less/node_modules/less/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-handle-source-errors.js</code></p>

<p>Yes, it is a headache to see deeply nested node_modules. You got more headache when you see that there are some duplicated node_modules pop out elsewhere. Well, the headache part is subjective my opinion.</p>

<!-- more -->


<p>I think <a href="https://www.npmjs.org/">npm</a> is designed to work in fire and forget style, when you install a module, you don&rsquo;t have to think dependencies hell where some modules require one module with different version number. If you install the latest, then other module simply break. You can&rsquo;t control that other modules author might choose to ignore if their modules dependency is updated with breaking changes. The solution is thet each module has its own <code>node_modules</code> and each module in <code>node_modules</code> has its own <code>node_modules</code> and so on.</p>

<p>A while ago, I wrote a Node.js module named <strong>flatten-packages</strong> that will flatten your node_modules into one level and removing all duplicates by aggressiely delete old version when new one is found. You can find the project on <a href="https://github.com/arifsetiawan/flatten">github</a>. There are things to consider when using <strong>flatten-packages</strong>:</p>

<ul>
<li>Your node_modules folder might explode with numbers of previously nested node_modules.</li>
<li>Version changes might break some of your dependency</li>
<li>You might be confused when trying to relate your package.json with exploded node_modules</li>
</ul>


<p>With <code>flatten-packages -i</code> command, you can get summary of your node_modules hierarcy.</p>

<p>Sample <code>flatten-packages -i</code> output</p>

<p><img src="http://blog.infinitesquares.net/images/posts/flatten_node_modules_small.png" title="Flatten small" alt="Flatten small" /></p>

<p>From 17 modules into 73 modules. I can live with that</p>

<p>Now consider this</p>

<p><img src="http://blog.infinitesquares.net/images/posts/flatten_node_modules_big.png" title="Flatten big" alt="Flatten big" /></p>

<p>8 layers deep of node_modules with 514 duplicates! If I flatten it, my node_modules folder with explode from 33 modules into 271 modules!</p>

<p>As I have said before, with npm you shouldn&rsquo;t worry about those deeply nested node_modules which cause <a href="https://github.com/joyent/node/issues/6960">Windows issue when filename has more than 260 characters</a> and modules duplicates (514 in above case) that eat up your disk space (disk is cheap now). It&rsquo;s just unlucky for me to work on Windows with ony 10 GB to spare. That what causes my headache.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Know Your Npm]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm/"/>
    <updated>2014-09-20T17:19:15+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/20/know-your-npm</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.org/">NPM (Node Packaged Modules)</a> is indespensable part of <a href="http://nodejs.org/">Node.js</a> ecosystem. Knowing how to use npm is really important when working on Node.js project. Some of the npm commands :</p>

<ul>
<li><code>npm init</code> &ndash;> create package.json file to start a Node.js project</li>
<li><code>npm install MODULENAME --save</code> &ndash;> install module and save to dependencies in package.json</li>
<li><code>npm install MODULENAME --save-dev</code> &ndash;> install module and save to devDependencies in package.json</li>
<li><code>npm install --production</code> &ndash;> skip devDependencies install</li>
<li><code>npm shrinkwrap</code> &ndash;> lock modules version dependency for the app</li>
<li><code>npm view -g --depth=0</code> &ndash;> list global installed modules</li>
<li><code>npm view MODULENAME</code> &ndash;> view module metadata on npmjs registry, you can check available versions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resizing MongoDB Data Disk]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk/"/>
    <updated>2014-09-17T06:19:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/17/resizing-mongodb-data-disk</id>
    <content type="html"><![CDATA[<p>I received a message saying the are issue in our Node.js app running on Azure: Can&rsquo;t take a write lock while out of disk space. The issue is clear enough: our MongoDB data disk is run out. I will outlined steps how we can resize MongoDB data disk. Well, it&rsquo;s not actually that hard. Simplified steps are :</p>

<!-- more -->


<ul>
<li>Prepare bigger data disk</li>
<li>Copy all old MongoDB data from old disk to new one</li>
<li>Update MongoDB config</li>
<li>Restart MongoDB service</li>
</ul>


<p>Start with preparing bigger disk space. On Azure, follow this tutorial on <a href="http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-how-to-attach-disk/">How to Attach a Data Disk to a Linux Virtual Machine</a></p>

<p>Then create MongoDB data folder and make sure to change ownership of the folder to mongod or you will have write access issue.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir /mongodata
</span><span class='line'>$ sudo chown -R mongod:mongod /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Copy all old data to new folder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo cp -r /oldmongodata /mongodata</span></code></pre></td></tr></table></div></figure>


<p>Use option <code>-v</code> if you want to see the copying progree, or if you forget to do that use this command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ watch ls -lah /mongodata</span></code></pre></td></tr></table></div></figure>


<p>When copy completed, open MongoDb config file (usually in <code>/etc/mongod.conf</code>) and update the dbpath to the new data folder.</p>

<p>Restart the service</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo service mongod start</span></code></pre></td></tr></table></div></figure>


<p>While the resizing MongoDB data disk is quite simple, disk run out issue should not be happening during production server deployment. One possible approach to minimize the risk is to create reporting daemon (or use third party service) to monitor server stats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Server Setup]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup/"/>
    <updated>2014-09-16T10:19:45+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/16/ubuntu-server-setup</id>
    <content type="html"><![CDATA[<p>When I started new Ubuntu machine on <a href="http://azure.microsoft.com/en-us/">Azure</a> or <a href="https://www.digitalocean.com/">DigitalOcean</a>, I usually install some applications such as <a href="http://nodejs.org/">Node.js</a>, <a href="http://www.mongodb.org/">MongoDB</a> and <a href="http://nginx.org/">Nginx</a> and <a href="http://git-scm.com/">Git</a>. To make things easier, I created a shell script that will do all that process.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># !/bin/sh</span>
</span><span class='line'><span class="c"># update</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get -y upgrade
</span><span class='line'>sudo apt-get -y install build-essential libssl-dev
</span><span class='line'>
</span><span class='line'><span class="c"># nodejs</span>
</span><span class='line'>sudo add-apt-repository -y ppa:chris-lea/node.js
</span><span class='line'>
</span><span class='line'><span class="c"># nginx</span>
</span><span class='line'>sudo add-apt-repository -y ppa:nginx/stable
</span><span class='line'>
</span><span class='line'><span class="c"># mongodb</span>
</span><span class='line'>sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen&#39;</span> | sudo tee /etc/apt/sources.list.d/mongodb.list
</span><span class='line'>
</span><span class='line'><span class="c"># git</span>
</span><span class='line'>sudo add-apt-repository -y ppa:git-core/ppa
</span><span class='line'>
</span><span class='line'><span class="c"># redis</span>
</span><span class='line'>sudo add-apt-repository -y ppa:rwky/redis
</span><span class='line'>
</span><span class='line'><span class="c"># update repo</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get dist-upgrade
</span><span class='line'>
</span><span class='line'><span class="c"># install</span>
</span><span class='line'>sudo apt-get -y install nodejs nginx mongodb-org git ufw redis-server
</span><span class='line'>
</span><span class='line'><span class="c"># start mongod</span>
</span><span class='line'>sudo service mongod start
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Using <a href="https://www.docker.com/">docker</a> would be nice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands Collection]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/10/git-commands/"/>
    <updated>2014-09-10T14:15:37+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/10/git-commands</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/">Git</a> is very powerful distributed revision control. It has lots of commands but I only use several of them. I often forget some of the rarely used git commands so I make notes here.</p>

<ul>
<li><code>git clone REPOURL LOCALFOLDER</code> &ndash;> obviously to clone</li>
<li><code>git status</code> &ndash;> get status of what files are modified, added or deleted</li>
</ul>


<!-- more -->


<ul>
<li><code>git log</code> &ndash;> get commit log</li>
<li><code>git checkout -b NEWBRANCH</code> &ndash;> create new branch from existing</li>
<li><code>git checkout BRANCH</code> &ndash;> checkout the branch.</li>
<li><code>git add .</code> &ndash;> add updated files into staging</li>
<li><code>git commit -am "commit message"</code> &ndash;> commit staging</li>
<li><code>git push REMOTE BRANCH</code> &ndash;> push to remote</li>
<li><code>git fetch REMOTE</code> &ndash;> get update from remote</li>
<li><code>git merge REMOTE/BRANCH</code> &ndash;> merge with remote branch</li>
<li><code>git pull REMOTE BRANCH</code> &ndash;> fetch and merge from remote branch</li>
<li><code>git rm --cached FILE</code> &ndash;> remove file from git cache</li>
<li><code>git rm -r --cached FOLDER</code> &ndash;> remove folder from git cache</li>
<li><code>git checkout -- .</code> &ndash;> reset all current changes</li>
</ul>


<p>Here are some not-so-common git command that I found out based on necessity</p>

<ul>
<li><code>git checkout SHA</code> &ndash;> checkout the commit SHA</li>
<li><code>git diff --name-status SHA1 SHA2</code> &ndash;> check what file is changed between two commits</li>
<li><code>git reset HEAD -- .</code> &ndash;> clear staging</li>
<li><code>git merge --abort</code> &ndash;> cancel merge</li>
<li><code>git reset --hard HEAD~1</code> &ndash;> nuke the last commit</li>
<li><code>git branch -a</code> &ndash;> list all branch remote and local</li>
<li><code>git branch -r</code> &ndash;> list remote branch</li>
<li><code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code> &ndash;> rename any branch</li>
<li><code>git branch -m &lt;newname&gt;</code> &ndash;> rename current branch</li>
<li><code>git branch -d &lt;branch&gt;</code> &ndash;> delete branch</li>
<li><code>git push origin newname</code> &ndash;> push new branch to remote</li>
<li><code>git push origin :oldname</code> &ndash;> remove old branch from remote</li>
<li><code>git clean -fx</code> &ndash;> delete untracked files and directories, -f force, -n directory</li>
<li><code>git clean -n</code> &ndash;> clean dry run, list what to be deleted</li>
<li><code>git checkout -- FILENAME</code> &ndash;> cancel changes on a filename</li>
<li><code>git log -- FILENAME</code> &ndash;> view a file changing history</li>
<li><code>git commit --amend -m "New commit message"</code> &ndash;> change latest commit message</li>
</ul>


<p>Reset</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD~1
</span><span class='line'>-&gt;The HEAD~1 means the commit before head.
</span><span class='line'>
</span><span class='line'>git reset --hard HEAD~4
</span><span class='line'>git reset --hard &lt;sha1-commit-id&gt;
</span><span class='line'>
</span><span class='line'>git reset --hard &lt;REMOTE&gt;/&lt;BRANCH_NAME&gt;
</span><span class='line'>git reset --hard origin/master</span></code></pre></td></tr></table></div></figure>


<p>Delete a file from commit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
</span><span class='line'>
</span><span class='line'>Update .gitignore and commit</span></code></pre></td></tr></table></div></figure>


<p>Replace master branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// on development machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git branch -m newbranch master
</span><span class='line'>git push -f origin master
</span><span class='line'>
</span><span class='line'>// on deployment machine
</span><span class='line'>git branch -m master old-master
</span><span class='line'>git fetch
</span><span class='line'>git checkout master</span></code></pre></td></tr></table></div></figure>


<p>Delete history of a file. This is useful if you accidentally included a file that should not be included (contains sensitive information)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILENAME' --prune-empty --tag-name-filter cat -- --all
</span><span class='line'>git push --force --verbose --dry-run
</span><span class='line'>git push --force</span></code></pre></td></tr></table></div></figure>


<p>Ignore files that have already been committed to a Git repository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm -r --cached .
</span><span class='line'>git add .
</span><span class='line'>git commit -m ".gitignore is now working"</span></code></pre></td></tr></table></div></figure>


<p>Undo last merge. Assume local master was not ahead of origin/master. It preserve changes. Here ORIG_HEAD should point to a commit directly before merge has occurred.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --merge ORIG_HEAD</span></code></pre></td></tr></table></div></figure>


<p>I will add more when I found out other git commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Node.js Project Base Template]]></title>
    <link href="http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template/"/>
    <updated>2014-09-09T15:11:00+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2014/09/09/nodejs-project-base-template</id>
    <content type="html"><![CDATA[<p>There are many Node.js starting template, and after working couple times with <a href="http://expressjs.com/">Expressjs</a>, I also ended up creating my own base template. You can check it out <a href="https://github.com/arifsetiawan/node-base">here</a>.</p>

<!-- more -->


<p>Base template ideally support your workflow and it has some structure to organize your code. My base template is not meant to be a full fledged framework like <a href="http://sailsjs.org/">sailsjs</a>, it just a bunch of codes that I would like to be readily available when I started a Node.js project. As I work more with Node.js, my base template will be evolving.</p>

<h2>Components</h2>

<ul>
<li>MongoDB as database</li>
<li>Passport to manage authentication with session stored in MongoDB</li>
<li>Formidable for multipart post</li>
<li>Swig as templating engine</li>
<li>Generic MongoDB query</li>
<li>Front end components

<ul>
<li>Bootstrap</li>
<li>Font awesome</li>
<li>jQuery</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://blog.infinitesquares.net/blog/2013/11/21/hello-world/"/>
    <updated>2013-11-21T13:43:28+07:00</updated>
    <id>http://blog.infinitesquares.net/blog/2013/11/21/hello-world</id>
    <content type="html"><![CDATA[<p>Starting to blog with octopress! blogging with markdown is fun!</p>

<h2>Steps on blogging with Octopress</h2>

<p>(So I don&rsquo;t always google)</p>

<!-- more -->


<p>Notes copied from <a href="http://octopress.org/docs/blogging/">octopress docs</a></p>

<h3>New article</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["This is awesome article title!"]</span></code></pre></td></tr></table></div></figure>


<p>edit headers, add categories. Example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># One category
</span><span class='line'>categories: Code
</span><span class='line'> 
</span><span class='line'># Multiple categories example 1
</span><span class='line'>categories: [Code, C++]
</span><span class='line'> 
</span><span class='line'># Multiple categories example 2
</span><span class='line'>categories:
</span><span class='line'>- Code
</span><span class='line'>- C++</span></code></pre></td></tr></table></div></figure>


<h3>New Pages</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page[super-awesome]
</span><span class='line'># creates /source/super-awesome/index.markdown</span></code></pre></td></tr></table></div></figure>


<h3>Content</h3>

<p>Inserting <code>&lt;!-- more --&gt;</code> will prevent the post content below this mark from being displayed on the index page for the blog posts</p>

<h3>Generate, Preview, Publish</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake generate   # Generates posts and pages into the public directory
</span><span class='line'>bundle exec rake preview    # Watches, and mounts a webserver at http://localhost:4000
</span><span class='line'>bundle exec rake deploy     # Deploy to git</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
